<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<!-- saved from url=(0014)about:internet --><!-- MSIE Mark of the Web -->

<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=keywords content="MathPageGen">

<meta name=Generator content="MathPage 1.0.1">
<meta name=Originator content="Microsoft Word 14">



<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Forms</title>

<link rel=themeData href="Forms_files/themedata.thmx">
<link rel=colorSchemeMapping href="Forms_files/colorschememapping.xml">

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;
	}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	}
@font-face
	{font-family:T1;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	}
@font-face
	{font-family:T15;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	}
@font-face
	{font-family:T9;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	}
h1
	{margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	color:#365F91;
	font-weight:bold;}
h2
	{margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial","sans-serif";
	color:#365F91;
	font-weight:bold;}
h3
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:center;
	line-height:115%;
	font-size:16.0pt;
	font-family:"Cambria","serif";
	font-weight:bold;}


p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";
	}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.4in;
	text-indent:-.2in;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	}
span.Heading1Char
	{font-family:"Arial","sans-serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{font-family:"Arial","sans-serif";
	color:#365F91;
	font-weight:bold;}
span.TitleChar
	{font-family:"Cambria","serif";
	font-weight:bold;}
span.BalloonTextChar
	{font-family:"Tahoma","sans-serif";
	}
span.personname
	{}
p.Blue, li.Blue, div.Blue
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	color:#0070C0;}
p.MTDisplayEquation, li.MTDisplayEquation, div.MTDisplayEquation
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	}
span.BlueChar
	{font-family:"Arial","sans-serif";
	color:#0070C0;}
span.MTDisplayEquationChar
	{font-family:"Arial","sans-serif";
	}
p.Fine, li.Fine, div.Fine
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:10.0pt;
	font-family:"Arial","sans-serif";
	}
span.MTConvertedEquation
	{}
span.FineChar
	{font-family:"Arial","sans-serif";
	}
p.Red, li.Red, div.Red
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	text-indent:-.25in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	color:red;}
span.RedChar
	{font-family:"Arial","sans-serif";
	color:red;}
span.Heading3Char
	{font-family:"Arial","sans-serif";
	font-weight:bold;}
.MsoChpDefault
	{}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;
	}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 @list l0
	{}
@list l0:level1
	{text-indent:-.25in;}
@list l0:level2
	{text-indent:-.25in;}
@list l0:level3
	{text-indent:-.25in;}
@list l0:level4
	{text-indent:-.25in;}
@list l0:level5
	{text-indent:-.25in;}
@list l0:level6
	{text-indent:-.25in;}
@list l0:level7
	{text-indent:-.25in;}
@list l0:level8
	{text-indent:-.25in;}
@list l0:level9
	{text-indent:-.25in;}
@list l1
	{}
@list l1:level1
	{text-indent:-.25in;}
@list l1:level2
	{text-indent:-.25in;}
@list l1:level3
	{text-indent:-9.0pt;}
@list l1:level4
	{text-indent:-.25in;}
@list l1:level5
	{text-indent:-.25in;}
@list l1:level6
	{text-indent:-9.0pt;}
@list l1:level7
	{text-indent:-.25in;}
@list l1:level8
	{text-indent:-.25in;}
@list l1:level9
	{text-indent:-9.0pt;}
@list l2
	{}
@list l2:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l2:level2
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l2:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l2:level4
	{text-indent:-.25in;
	font-family:Symbol;}
@list l2:level5
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l2:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l2:level7
	{text-indent:-.25in;
	font-family:Symbol;}
@list l2:level8
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l2:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l3
	{}
@list l3:level1
	{text-indent:-.25in;}
@list l3:level2
	{text-indent:-.25in;}
@list l3:level3
	{text-indent:-.25in;}
@list l3:level4
	{text-indent:-.25in;}
@list l3:level5
	{text-indent:-.25in;}
@list l3:level6
	{text-indent:-.25in;}
@list l3:level7
	{text-indent:-.25in;}
@list l3:level8
	{text-indent:-.25in;}
@list l3:level9
	{text-indent:-.25in;}
@list l4
	{}
@list l4:level1
	{text-indent:-.25in;}
@list l4:level2
	{text-indent:-.25in;}
@list l4:level3
	{text-indent:-.25in;}
@list l4:level4
	{text-indent:-.25in;}
@list l4:level5
	{text-indent:-.25in;}
@list l4:level6
	{text-indent:-.25in;}
@list l4:level7
	{text-indent:-.25in;}
@list l4:level8
	{text-indent:-.25in;}
@list l4:level9
	{text-indent:-.25in;}
@list l5
	{}
@list l5:level1
	{text-indent:-.25in;}
@list l5:level2
	{text-indent:-.25in;}
@list l5:level3
	{text-indent:-.25in;}
@list l5:level4
	{text-indent:-.25in;}
@list l5:level5
	{text-indent:-.25in;}
@list l5:level6
	{text-indent:-.25in;}
@list l5:level7
	{text-indent:-.25in;}
@list l5:level8
	{text-indent:-.25in;}
@list l5:level9
	{text-indent:-.25in;}
@list l6
	{}
@list l6:level1
	{text-indent:-.25in;}
@list l6:level2
	{text-indent:-.25in;}
@list l6:level3
	{text-indent:-.25in;}
@list l6:level4
	{text-indent:-.25in;}
@list l6:level5
	{text-indent:-.25in;}
@list l6:level6
	{text-indent:-.25in;}
@list l6:level7
	{text-indent:-.25in;}
@list l6:level8
	{text-indent:-.25in;}
@list l6:level9
	{text-indent:-.25in;}
@list l7
	{}
@list l7:level1
	{text-indent:-.25in;}
@list l7:level2
	{text-indent:-.25in;}
@list l7:level3
	{text-indent:-9.0pt;}
@list l7:level4
	{text-indent:-.25in;}
@list l7:level5
	{text-indent:-.25in;}
@list l7:level6
	{text-indent:-9.0pt;}
@list l7:level7
	{text-indent:-.25in;}
@list l7:level8
	{text-indent:-.25in;}
@list l7:level9
	{text-indent:-9.0pt;}
@list l8
	{}
@list l8:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l8:level2
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l8:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l8:level4
	{text-indent:-.25in;
	font-family:Symbol;}
@list l8:level5
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l8:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l8:level7
	{text-indent:-.25in;
	font-family:Symbol;}
@list l8:level8
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l8:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l9
	{}
@list l9:level1
	{text-indent:-.25in;}
@list l9:level2
	{text-indent:-.25in;}
@list l9:level3
	{text-indent:-.25in;}
@list l9:level4
	{text-indent:-.25in;}
@list l9:level5
	{text-indent:-.25in;}
@list l9:level6
	{text-indent:-.25in;}
@list l9:level7
	{text-indent:-.25in;}
@list l9:level8
	{text-indent:-.25in;}
@list l9:level9
	{text-indent:-.25in;}
@list l10
	{}
@list l10:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l10:level2
	{text-indent:-.25in;
	font-family:"Courier New";
	}
@list l10:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level4
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level5
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level7
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level8
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l10:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l11
	{}
@list l11:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l11:level2
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l11:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l11:level4
	{text-indent:-.25in;
	font-family:Symbol;}
@list l11:level5
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l11:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l11:level7
	{text-indent:-.25in;
	font-family:Symbol;}
@list l11:level8
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l11:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l12
	{}
@list l12:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l12:level2
	{text-indent:-.25in;
	font-family:"Courier New";
	}
@list l12:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l12:level4
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l12:level5
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l12:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l12:level7
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l12:level8
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l12:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l13
	{}
@list l13:level1
	{text-indent:-.25in;}
@list l13:level2
	{text-indent:-.25in;}
@list l13:level3
	{text-indent:-9.0pt;}
@list l13:level4
	{text-indent:-.25in;}
@list l13:level5
	{text-indent:-.25in;}
@list l13:level6
	{text-indent:-9.0pt;}
@list l13:level7
	{text-indent:-.25in;}
@list l13:level8
	{text-indent:-.25in;}
@list l13:level9
	{text-indent:-9.0pt;}
@list l14
	{}
@list l14:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l14:level2
	{text-indent:-.25in;
	font-family:"Courier New";
	}
@list l14:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l14:level4
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l14:level5
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l14:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l14:level7
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l14:level8
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l14:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l15
	{}
@list l15:level1
	{text-indent:-.25in;}
@list l15:level2
	{text-indent:-.25in;}
@list l15:level3
	{text-indent:-.25in;}
@list l15:level4
	{text-indent:-.25in;}
@list l15:level5
	{text-indent:-.25in;}
@list l15:level6
	{text-indent:-.25in;}
@list l15:level7
	{text-indent:-.25in;}
@list l15:level8
	{text-indent:-.25in;}
@list l15:level9
	{text-indent:-.25in;}
@list l16
	{}
@list l16:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l16:level2
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l16:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l16:level4
	{text-indent:-.25in;
	font-family:Symbol;}
@list l16:level5
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l16:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l16:level7
	{text-indent:-.25in;
	font-family:Symbol;}
@list l16:level8
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l16:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l17
	{}
@list l17:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l17:level2
	{text-indent:-.25in;
	font-family:"Courier New";
	}
@list l17:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l17:level4
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l17:level5
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l17:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l17:level7
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l17:level8
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l17:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l18
	{}
@list l18:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l18:level2
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l18:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l18:level4
	{text-indent:-.25in;
	font-family:Symbol;}
@list l18:level5
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l18:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l18:level7
	{text-indent:-.25in;
	font-family:Symbol;}
@list l18:level8
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l18:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l19
	{}
@list l19:level1
	{text-indent:-.25in;}
@list l19:level2
	{text-indent:-.25in;}
@list l19:level3
	{text-indent:-.25in;}
@list l19:level4
	{text-indent:-.25in;}
@list l19:level5
	{text-indent:-.25in;}
@list l19:level6
	{text-indent:-.25in;}
@list l19:level7
	{text-indent:-.25in;}
@list l19:level8
	{text-indent:-.25in;}
@list l19:level9
	{text-indent:-.25in;}
@list l20
	{}
@list l20:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l20:level2
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l20:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l20:level4
	{text-indent:-.25in;
	font-family:Symbol;}
@list l20:level5
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l20:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l20:level7
	{text-indent:-.25in;
	font-family:Symbol;}
@list l20:level8
	{text-indent:-.25in;
	font-family:"Courier New";}
@list l20:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l21
	{}
@list l21:level1
	{text-indent:-.25in;}
@list l21:level2
	{text-indent:-.25in;}
@list l21:level3
	{text-indent:-.25in;}
@list l21:level4
	{text-indent:-.25in;}
@list l21:level5
	{text-indent:-.25in;}
@list l21:level6
	{text-indent:-.25in;}
@list l21:level7
	{text-indent:-.25in;}
@list l21:level8
	{text-indent:-.25in;}
@list l21:level9
	{text-indent:-.25in;}
@list l22
	{}
@list l22:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l22:level2
	{text-indent:-.25in;
	font-family:"Courier New";
	}
@list l22:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l22:level4
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l22:level5
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l22:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l22:level7
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l22:level8
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l22:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l23
	{}
@list l23:level1
	{text-indent:-.25in;}
@list l23:level2
	{text-indent:-.25in;}
@list l23:level3
	{text-indent:-9.0pt;}
@list l23:level4
	{text-indent:-.25in;}
@list l23:level5
	{text-indent:-.25in;}
@list l23:level6
	{text-indent:-9.0pt;}
@list l23:level7
	{text-indent:-.25in;}
@list l23:level8
	{text-indent:-.25in;}
@list l23:level9
	{text-indent:-9.0pt;}
@list l24
	{}
@list l24:level1
	{text-indent:-.25in;}
@list l24:level2
	{text-indent:-.25in;}
@list l24:level3
	{text-indent:-.25in;}
@list l24:level4
	{text-indent:-.25in;}
@list l24:level5
	{text-indent:-.25in;}
@list l24:level6
	{text-indent:-.25in;}
@list l24:level7
	{text-indent:-.25in;}
@list l24:level8
	{text-indent:-.25in;}
@list l24:level9
	{text-indent:-.25in;}
@list l25
	{}
@list l25:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l25:level2
	{text-indent:-.25in;
	font-family:"Courier New";
	}
@list l25:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l25:level4
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l25:level5
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l25:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l25:level7
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l25:level8
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l25:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l26
	{}
@list l26:level1
	{text-indent:-.25in;
	font-family:Symbol;}
@list l26:level2
	{text-indent:-.25in;
	font-family:"Courier New";
	}
@list l26:level3
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l26:level4
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l26:level5
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l26:level6
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l26:level7
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l26:level8
	{text-indent:-.25in;
	font-family:Wingdings;}
@list l26:level9
	{text-indent:-.25in;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

<!-- MP HEAD( -->
<style>
.MPPH { visibility:hidden; page-break-inside:avoid }
.MPPHSpan { text-indent:0 }
sub,sup { font-size:x-small }
#MPDpiSpan { position:absolute; top:1in; left:1in; width:100px; border:none; visibility:hidden }
.MPEntity { font-family:'Times New Roman',Times,serif }
</style>
<style media=screen>
.MPScreenEqn { position:absolute; visibility:visible; z-index:98 }
.MPPrintEqn { display:none }
.MPScreenPH { }
.MPPrintPH { display:none }
.MPPopup { position:absolute; visibility:hidden; z-index:99; top:0; left:0; text-indent:0; cursor:hand; 
border:solid blue 1px; padding:5px; background-color:#FFFFCC; 
filter:progid:DXImageTransform.Microsoft.DropShadow(color=#444444,offx=3,offy=3,positive=1) 
}
.MPPopupNoBg { position:absolute; visibility:hidden; z-index:99; top:0; left:0; text-indent:0; cursor:hand; 
border:solid blue 1px; padding:5px; 
filter:progid:DXImageTransform.Microsoft.DropShadow(color=#444444,offx=3,offy=3,positive=1) 
}
</style>
<style media=print>
.MPScreenEqn { display:none }
.MPPrintEqn { position:absolute; visibility:visible }
.MPScreenPH { display:none }
.MPPrintPH { }
.MPPopup { display:none }
.MPPopupNoBg { display:none }
</style>
<script language=javascript src='mathpage.js'></script>
<script language=javascript>
if (typeof DSMP == 'undefined') {
	alert('MathPage Javascript file missing; equations and symbols will not display.');
	var DSMP = new Object;
	MPBodyInit=MPSetEqnAttrs=MPSetChAttrs=MPEquation=MPInlineChar=MPDeleteCode=MPNNCalcTopLeft=MPHidePopup=MPShowPopup=MPNNSelectScreenEqn=MPWebEQApplet=MPTechexplorerObject=function(){};
	DSMP.gEmptySrc=DSMP.gPlaceholderHeight=DSMP.gPlaceholderWidth=DSMP.gPlaceholder2Height=DSMP.gNNPopupBgColor=DSMP.gPopupEqnSrc=DSMP.gPopupEqnPadding=DSMP.gNNLayerTop=DSMP.gNNLayerLeft=DSMP.gScreenEqnSrc=DSMP.gScreenEqnWidth=DSMP.gScreenEqnHeight=DSMP.gPrintEqnSrc=null;
}
DSMP.gPageVersion = '1.1';
DSMP.gMaxCharCompat = 1;
DSMP.gGenMathZoom = 1;
DSMP.gPopupEqnBgColorDefault = '#FFFFCC';
DSMP.gPopupEqnPaddingDefault = 5;
DSMP.gPlaceholderPadding = 4;
DSMP.gOldJSMessage = 'Warning: this MathPage document requires a newer JavaScript file and may not display correctly.';
DSMP.gCompatMessage = 'Warning: this MathPage document was generated for Windows IE5 or later only and may not display correctly.';
DSMP.gMinBrowserMessage = 'Warning: MathPage requires a version 4 or later browser.';
DSMP.gHidePopupMessage = 'Click on a MathZoom equation to dismiss it, or shift-Click to close all.';
DSMP.gShowPopupMessage = 'Click on an equation to show the enlarged MathZoom version.';
</script>
<!-- )MP HEAD -->
</head>

<body lang=EN-US link=blue vlink=purple >
<!-- MP BODY(-->
<span id=MPDpiSpan></span>
<script language=javascript>
MPBodyInit('Forms_files')
</script>
<!-- )MP BODY -->


<div class=WordSection1>

 <pre><img
border=0 width=88 height=31 src="/MM/CreativeCommons.gif"
alt="Creative Commons License" v:shapes="_x0000_i1035"></span><![endif]></span></a></pre>
<p class=MsoNormal>This work is licensed under a <a
href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons Attribution-ShareAlike 2.5 License</a>.</p>

<p class=MsoTitle><span style='font-family:"Arial","sans-serif";color:#1F497D'>An
Introduction to Forms</span></p>
<div>
<div class=MsoListParagraph><pre><b>by <a
href="http://www.cwru.edu/artsci/math/wells/home.html">Charles Wells</a></b>     <b>Last revised 2015 1130</b>     <b>Charles (at) abstractmath.org</b></pre>
</div>
<h1>Introduction</h1>

<p class=MsoNormal>A <b >form </b>is a kind
of generalized sketch that I introduced in [<a href="#GenSk">GenSk</a>].   The most detailed description of forms is in
[<a href="#GBLS">GBLS</a>].  Reading this
introduction might help you work your way through that paper.</p>

<p class=MsoNormal>A <b>sketch</b> (invented fifty years ago by Charles
Ehresmann) is a&nbsp;<i>mathematical structure</i> designed for&nbsp;<i>specifying
a</i> <i>type of mathematical structure</i>.&nbsp; Sketches are described
briefly here and in detail in references<a href="#CTCS"> [CTCS] </a>and [<a
href="#TTT">TTT</a>]. A form is an abstraction of the concept of sketch. Forms
also specify kinds of mathematical structures, and they can specify more kinds
of structures than&nbsp;sketches can [<a href="#LimSk">LimSk</a>].  In a sense, a form is a kind of sketch of a
sketch.</p>

<p class=MsoNormal>I will sneak up on the idea of sketch using the specification
of <b>directed graphs</b> as an example.</p>

<h1><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="Picture_x0020_3" o:spid="_x0000_s1026" type="#_x0000_t75"
 alt="Description: directedgraph" style='position:absolute;margin-left:54.55pt;
 margin-top:0;width:96.75pt;height:102.75pt;z-index:251655168;visibility:visible;
 mso-position-horizontal:right;mso-position-vertical:top;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="Forms_files/image001.jpg" o:title="directedgraph"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=148 height=157
src="Forms_files/image002.jpg" align=right hspace=12
alt="Description: directedgraph" v:shapes="Picture_x0020_3"><![endif]>Directed
graphs</h1>

<p class=MsoNormal>This picture shows a directed graph.&nbsp;&nbsp; A graph
theorist might call it a <i>directed multigraph with loops.&nbsp;&nbsp; </i></p>

<p class=MsoNormal><span class=BlueChar>What
makes it a <b style='mso-bidi-font-weight:normal'>directed graph</b> is that it
has some<b style='mso-bidi-font-weight:normal'> nodes</b> (<i style='mso-bidi-font-style:
normal'>x</i>, <i style='mso-bidi-font-style:normal'>y</i>, <i
style='mso-bidi-font-style:normal'>z</i> and <i style='mso-bidi-font-style:
normal'>w</i> in this case), some <b style='mso-bidi-font-weight:normal'>arrows</b>
(<i style='mso-bidi-font-style:normal'>a</i>, <i style='mso-bidi-font-style:
normal'>b</i>, <i style='mso-bidi-font-style:normal'>c</i>, <i
style='mso-bidi-font-style:normal'>d</i>,<i style='mso-bidi-font-style:normal'>
e</i>, <i style='mso-bidi-font-style:normal'>u</i>), and each arrow has a <b
style='mso-bidi-font-weight:normal'>source</b> and a <b style='mso-bidi-font-weight:
normal'>target</b>;</span><span style='color:#0070C0'> </span>for
example, the source of <i>c</i> is <i>z </i>and its target is <i>x. </i>That
information completely determines the structure of a directed graph.</p>

<p class=MsoNormal>The picture has lots of extraneous information irrelevant to
the structure, for example the placement of the nodes.&nbsp; This
extraneous&nbsp;data may make it easier to see the structure but is not part of
the structure of the directed graph itself.&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;line-height:115%'>You can
denote the set of positive divisors of 7 by {1,7} or by {7,1}; in either case
it is the set whose elements are exactly 1 and 7 and nothing else.&nbsp;
Whether the&nbsp;1 or the 7 comes first inside the braces is not
relevant.&nbsp; It is interesting that <i>most notation systems for
mathematical object has properties that are irrelevant to the structure denoted
-- </i>even the notation for a two-element set.&nbsp; This introduces noise
in&nbsp;the required <a
href="/MM/MMPatternRecognition.htm">pattern
recognition</a> process.</span></p>

<p class=MsoNormal>The statement in <span style='color:#0000A0'>blue</span>
above is an <b>informal definition</b> of&nbsp; &quot;directed graph&quot;
written in <a href="/MM/MMMathEnglish.htm">mathematical
English</a>.&nbsp; This definition determines a type of mathematical
structure.&nbsp; You could go on and&nbsp;say that <span style='color:#0000A0'>a
</span><b><span style='color:#0070C0'>morphism </span></b><span class=BlueChar>of directed graphs must take
nodes to nodes, arrows to arrows, and preserve source and target.</span>
For example, a morphism &nbsp;<i>f</i> from the directed graph in the picture
to some other directed graph must satisfy the requirements that the source of <i>f</i>(<i>c</i>)
must be <i>f</i>(<i>z</i>) and the target must be <i>f</i>(<i>x</i>).&nbsp;&nbsp;
Thus the two statements in blue define a <i>category of directed graphs.</i></p>

<p class=MsoNormal>There are other ways to define morphism of directed graphs;
for example, you can allow an arrow to go to a node.&nbsp; That category of
directed graphs can also be sketched.&nbsp; So can undirected graphs.&nbsp;<a
href="#GMG"> [GMG] </a> gives a survey of
these concepts.</p>

<h1>About definitions</h1>

<p class=MsoNormal>The definitions in blue require experience in reading
mathematical prose and fairly sophisticated pattern-recognition to determine
that they <i>are </i>definitions and to determine&nbsp;just what requirements
they impose for an object to be a directed graph.&nbsp;&nbsp; This is discussed
in detail in <a href="/MM/MMDefs.htm">abstractmath.org</a>.</p>

<p class=MsoNormal>Both the definitions in blue could be made more
formal.&nbsp; They could be clearly marked as definitions and the example
remarks could be segregated into another paragraph.&nbsp; For example:</p>

<p class=MsoNormal><b>Definition. </b>A <b>directed graph </b>consists of two
sets <i>A,</i> whose elements are called <b>arrows<i>,</i></b> and <i>N, </i>whose
elements are called <b>nodes, </b>and two&nbsp;functions&nbsp;<!-- MP EQPHNS( --><script id=mpeq0001s1>
	MPSetEqnAttrs('eq0001','',3,[[72,9,0,-1,-1],[96,12,0,-1,-1],[121,15,0,-1,-1],[109,13,1,-1,-1],[148,18,0,-1,-1],[184,22,1,-1,-1],[304,37,1,-2,-2]])
</script><![if !ie]><span id=mpnneq0001ph class=MPNNCode
	><img border=0 name=mpeq0001ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0001s2>
	MPEquation()
</script><!-- )MP EQPHNS -->
and <!-- MP EQPHNS( --><script id=mpeq0002s1>
	MPSetEqnAttrs('eq0002','',3,[[68,11,2,-1,-1],[91,15,3,-1,-1],[114,18,4,-1,-1],[103,17,4,-1,-1],[136,22,5,-1,-1],[170,27,7,-1,-1],[282,45,10,-2,-2]])
</script><![if !ie]><span id=mpnneq0002ph class=MPNNCode
	><img border=0 name=mpeq0002ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0002s2>
	MPEquation()
</script><!-- )MP EQPHNS -->.</p><!-- MP EQRA( --><script id=mpeq0002s1>
	MPSetEqnAttrs('eq0002','',3,[[68,11,2,-1,-1],[91,15,3,-1,-1],[114,18,4,-1,-1],[103,17,4,-1,-1],[136,22,5,-1,-1],[170,27,7,-1,-1],[282,45,10,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0002 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0002ph,'')
	</script><layer id=mpeq0002pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0002pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0002 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0002,mpeq0002pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0002s3>
	MPDeleteCode('eq0002')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0001s1>
	MPSetEqnAttrs('eq0001','',3,[[72,9,0,-1,-1],[96,12,0,-1,-1],[121,15,0,-1,-1],[109,13,1,-1,-1],[148,18,0,-1,-1],[184,22,1,-1,-1],[304,37,1,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0001 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0001ph,'')
	</script><layer id=mpeq0001pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0001pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0001 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0001,mpeq0001pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0001s3>
	MPDeleteCode('eq0001')
</script><![endif]><!-- )MP EQ -->

<p class=MsoNormal>This formal definition is still a piece of mathematical
English.&nbsp; It&nbsp;still requires pattern recognition to extract the
mathematical&nbsp;content.&nbsp; But <i>what is the mathematical content of a
definition? </i>Both mathematical logic and sketch theory provide (different)
answers to this question:&nbsp; Both provide <i>a mathematical object that
determines a type of structure. </i></p>

<h1>First-order theories</h1>

<p class=MsoNormal>A&nbsp; <b>first-order theory</b> is a <i >mathematical structure that specifies a type of mathematical structure</i>.&nbsp;&nbsp;It
provides a <i>mathematically defined</i> system of&nbsp;symbols, expressions
and formulas that determine a type of structure, along with a set of rules that
determine which sets-with-structure are of the desired type, in other words are
<b>models</b>.&nbsp; The expressions and formulas are <i>strings of symbols </i>defined
recursively and subject to axioms.</p>

<p class=MsoNormal>As an example, the theory for directed graphs could contain
two <b>types </b>(node, arrow), a set of <b>variables </b>of each type, two <b>unary
function symbols</b> <i>s </i>and <i>t, </i>and some production rules such as:
&quot;If&nbsp;<i>a</i> is of type arrow, then <i>s</i>(<i>a</i>) is a well
formed term of type node.&quot;&nbsp;&nbsp;&nbsp; (You could also use a
single-sorted theory, with predicates that say whether an object is a node or
an arrow.)&nbsp; A model<b> </b>of&nbsp;this theory&nbsp;(in the category of
sets) must consist of two sets and two functions between them.</p>

<p class=MsoNormal><i>This theory is a mathematical object. </i>The fact that first-order
theories and their models&nbsp;are math objects&nbsp;allows you to prove
theorems such as the Löwenheim-Skolem Theorem (every finitary first order
theory that has an infinitary model has non-isomorphic models, which is where
you get non-standard integers).</p>

<p class=MsoNormal>The
details about first order theories are spelled out in the <a
href="http://plato.stanford.edu/entries/modeltheory-fo/">Stanford encyclopedia entry</a>.&nbsp;&nbsp; Wikipedia has a
<a href="http://en.wikipedia.org/wiki/First_order_theory">list of first order theories</a> of common structures such as
groups and (undirected) graphs.<span style='mso-spacerun:yes'>  </span><o:p></o:p></p>

<p class=MsoNormal>A first order theory could be described as a mathematical
object consisting of strings of symbols subject to certain axioms, along with
rules describing what models must be.&nbsp; Thus it takes a formal definition
in Mathematical English, such as the definition of directed graph given above,
and <i>models </i>it as strings, in the same way we might model the flight of a
cannonball as a parabola.&nbsp; (This is a <i>different </i>use of the word
&quot;model&quot; from the meaning of model of a first order theory.&nbsp;
Abstractmath.org has a <a href="/MM/MMRepsModels.htm">discussion</a>
about the various uses of the word &quot;model&quot;.)&nbsp; </p>

<p class=MsoNormal>Because of this, it makes sense to say that a first order
theory is a <b>string-based specification </b>of a type of math structure.</p>

<h1>Sketches</h1>

<p class=MsoNormal><!--[if gte vml 1]><v:shape id="Picture_x0020_2" o:spid="_x0000_s1032"
 type="#_x0000_t75" alt="Description: parallelpair2" style='position:absolute;
 margin-left:42.55pt;margin-top:0;width:93.75pt;height:38.25pt;z-index:251660288;
 visibility:visible;mso-position-horizontal:right;mso-position-vertical:top;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="Forms_files/image003.jpg" o:title="parallelpair2"/>
 <w:wrap type="square" side="right"/>
</v:shape><![endif]--><![if !vml]><img width=143 height=58
src="Forms_files/image004.jpg" align=right hspace=12
alt="Description: parallelpair2" v:shapes="Picture_x0020_2"><![endif]>A&nbsp;sketch
is a <b>graph-based specification </b>of a type of mathematical
structure.&nbsp; The sketch for directed graphs is shown at the right.&nbsp; It
is itself a graph, which is confusing.&nbsp; Get used to it.&nbsp; </p>

<p class=MsoNormal>A <b>model </b><i>M </i>of this sketch in a category <!-- MP EQPHNS( --><script id=mpeq0003s1>
	MPSetEqnAttrs('eq0003','',3,[[7,9,1,-1,-1],[8,12,1,-1,-1],[10,15,1,-1,-1],[9,13,2,-1,-1],[13,18,1,-1,-1],[16,23,3,-1,-1],[26,37,3,-2,-2]])
</script><![if !ie]><span id=mpnneq0003ph class=MPNNCode
	><img border=0 name=mpeq0003ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0003s2>
	MPEquation()
</script><!-- )MP EQPHNS --> consists of objects <!-- MP EQPHNS( --><script id=mpeq0004s1>
	MPSetEqnAttrs('eq0004','',3,[[27,11,2,-1,-1],[36,15,3,-1,-1],[44,18,4,-1,-1],[41,17,4,-1,-1],[54,22,5,-1,-1],[68,27,7,-1,-1],[111,45,10,-2,-2]])
</script><![if !ie]><span id=mpnneq0004ph class=MPNNCode
	><img border=0 name=mpeq0004ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0004s2>
	MPEquation()
</script><!-- )MP EQPHNS --> and <!-- MP EQPHNS( --><script id=mpeq0005s1>
	MPSetEqnAttrs('eq0005','',3,[[27,11,2,-1,-1],[34,15,3,-1,-1],[44,18,4,-1,-1],[39,17,4,-1,-1],[52,22,5,-1,-1],[66,27,7,-1,-1],[108,45,10,-2,-2]])
</script><![if !ie]><span id=mpnneq0005ph class=MPNNCode
	><img border=0 name=mpeq0005ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0005s2>
	MPEquation()
</script><!-- )MP EQPHNS -->  of <!-- MP EQPHNS( --><script id=mpeq0006s1>
	MPSetEqnAttrs('eq0006','',3,[[7,9,1,-1,-1],[8,12,1,-1,-1],[10,15,1,-1,-1],[9,13,2,-1,-1],[13,18,1,-1,-1],[16,23,3,-1,-1],[26,37,3,-2,-2]])
</script><![if !ie]><span id=mpnneq0006ph class=MPNNCode
	><img border=0 name=mpeq0006ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0006s2>
	MPEquation()
</script><!-- )MP EQPHNS --> and morphisms <!-- MP EQPHNS( --><script id=mpeq0007s1>
	MPSetEqnAttrs('eq0007','',3,[[105,11,2,-1,-1],[139,15,3,-1,-1],[174,18,4,-1,-1],[157,17,4,-1,-1],[209,22,5,-1,-1],[261,27,7,-1,-1],[436,45,10,-2,-2]])
</script><![if !ie]><span id=mpnneq0007ph class=MPNNCode
	><img border=0 name=mpeq0007ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0007s2>
	MPEquation()
</script><!-- )MP EQPHNS --> and  <!-- MP EQPHNS( --><script id=mpeq0008s1>
	MPSetEqnAttrs('eq0008','',3,[[102,11,2,-1,-1],[136,15,3,-1,-1],[170,18,4,-1,-1],[154,17,4,-1,-1],[204,22,5,-1,-1],[256,27,7,-1,-1],[424,45,10,-2,-2]])
</script><![if !ie]><span id=mpnneq0008ph class=MPNNCode
	><img border=0 name=mpeq0008ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0008s2>
	MPEquation()
</script><!-- )MP EQPHNS --> of <!-- MP EQPHNS( --><script id=mpeq0009s1>
	MPSetEqnAttrs('eq0009','',3,[[7,9,1,-1,-1],[8,12,1,-1,-1],[10,15,1,-1,-1],[9,13,2,-1,-1],[13,18,1,-1,-1],[16,23,3,-1,-1],[26,37,3,-2,-2]])
</script><![if !ie]><span id=mpnneq0009ph class=MPNNCode
	><img border=0 name=mpeq0009ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0009s2>
	MPEquation()
</script><!-- )MP EQPHNS -->.</p><!-- MP EQRA( --><script id=mpeq0009s1>
	MPSetEqnAttrs('eq0009','',3,[[7,9,1,-1,-1],[8,12,1,-1,-1],[10,15,1,-1,-1],[9,13,2,-1,-1],[13,18,1,-1,-1],[16,23,3,-1,-1],[26,37,3,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0009 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0009ph,'')
	</script><layer id=mpeq0009pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0009pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0009 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0009,mpeq0009pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0009s3>
	MPDeleteCode('eq0009')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0008s1>
	MPSetEqnAttrs('eq0008','',3,[[102,11,2,-1,-1],[136,15,3,-1,-1],[170,18,4,-1,-1],[154,17,4,-1,-1],[204,22,5,-1,-1],[256,27,7,-1,-1],[424,45,10,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0008 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0008ph,'')
	</script><layer id=mpeq0008pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0008pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0008 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0008,mpeq0008pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0008s3>
	MPDeleteCode('eq0008')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0007s1>
	MPSetEqnAttrs('eq0007','',3,[[105,11,2,-1,-1],[139,15,3,-1,-1],[174,18,4,-1,-1],[157,17,4,-1,-1],[209,22,5,-1,-1],[261,27,7,-1,-1],[436,45,10,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0007 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0007ph,'')
	</script><layer id=mpeq0007pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0007pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0007 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0007,mpeq0007pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0007s3>
	MPDeleteCode('eq0007')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0006s1>
	MPSetEqnAttrs('eq0006','',3,[[7,9,1,-1,-1],[8,12,1,-1,-1],[10,15,1,-1,-1],[9,13,2,-1,-1],[13,18,1,-1,-1],[16,23,3,-1,-1],[26,37,3,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0006 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0006ph,'')
	</script><layer id=mpeq0006pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0006pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0006 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0006,mpeq0006pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0006s3>
	MPDeleteCode('eq0006')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0005s1>
	MPSetEqnAttrs('eq0005','',3,[[27,11,2,-1,-1],[34,15,3,-1,-1],[44,18,4,-1,-1],[39,17,4,-1,-1],[52,22,5,-1,-1],[66,27,7,-1,-1],[108,45,10,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0005 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0005ph,'')
	</script><layer id=mpeq0005pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0005pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0005 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0005,mpeq0005pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0005s3>
	MPDeleteCode('eq0005')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0004s1>
	MPSetEqnAttrs('eq0004','',3,[[27,11,2,-1,-1],[36,15,3,-1,-1],[44,18,4,-1,-1],[41,17,4,-1,-1],[54,22,5,-1,-1],[68,27,7,-1,-1],[111,45,10,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0004 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0004ph,'')
	</script><layer id=mpeq0004pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0004pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0004 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0004,mpeq0004pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0004s3>
	MPDeleteCode('eq0004')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0003s1>
	MPSetEqnAttrs('eq0003','',3,[[7,9,1,-1,-1],[8,12,1,-1,-1],[10,15,1,-1,-1],[9,13,2,-1,-1],[13,18,1,-1,-1],[16,23,3,-1,-1],[26,37,3,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0003 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0003ph,'')
	</script><layer id=mpeq0003pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0003pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0003 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0003,mpeq0003pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0003s3>
	MPDeleteCode('eq0003')
</script><![endif]><!-- )MP EQ -->

<p class=MsoNormal>Thus a model in the category of sets is <i>both of these
things</i>:</p>

<p class=MsoListParagraph ><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A particular directed graph.</p>

<p class=MsoListParagraph ><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A functor 
from the sketch to the category of sets.</p>

<p class=MsoNormal><span style='font-size:10.0pt;line-height:115%'>A functor
from a directed graph into a category is defined in the same way as a functor
from a category into a category, except that there are no composites or
identities to preserve.&nbsp;</span></p>

<p class=MsoNormal>A <b>morphism of models </b>of this sketch from <!-- MP EQPHNS( --><script id=mpeq0010s1>
	MPSetEqnAttrs('eq0010','',3,[[13,13,4,-1,-1],[16,17,5,-1,-1],[20,21,6,-1,-1],[18,19,5,-1,-1],[23,25,7,-1,-1],[29,31,9,-1,-1],[50,51,14,-2,-2]])
</script><![if !ie]><span id=mpnneq0010ph class=MPNNCode
	><img border=0 name=mpeq0010ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0010s2>
	MPEquation()
</script><!-- )MP EQPHNS --> to&nbsp;<!-- MP EQPHNS( --><script id=mpeq0011s1>
	MPSetEqnAttrs('eq0011','',3,[[15,13,4,-1,-1],[19,17,5,-1,-1],[24,21,6,-1,-1],[21,19,5,-1,-1],[27,25,7,-1,-1],[35,31,9,-1,-1],[61,51,14,-2,-2]])
</script><![if !ie]><span id=mpnneq0011ph class=MPNNCode
	><img border=0 name=mpeq0011ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0011s2>
	MPEquation()
</script><!-- )MP EQPHNS -->&nbsp;is
a pair of functions <!-- MP EQPHNS( --><script id=mpeq0012s1>
	MPSetEqnAttrs('eq0012','',3,[[104,13,4,-1,-1],[139,17,5,-1,-1],[174,21,6,-1,-1],[156,19,5,-1,-1],[207,25,7,-1,-1],[258,31,9,-1,-1],[433,51,14,-2,-2]])
</script><![if !ie]><span id=mpnneq0012ph class=MPNNCode
	><img border=0 name=mpeq0012ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0012s2>
	MPEquation()
</script><!-- )MP EQPHNS -->  and  <!-- MP EQPHNS( --><script id=mpeq0013s1>
	MPSetEqnAttrs('eq0013','',3,[[102,13,4,-1,-1],[136,17,5,-1,-1],[171,21,6,-1,-1],[153,19,5,-1,-1],[203,25,7,-1,-1],[254,31,9,-1,-1],[426,51,14,-2,-2]])
</script><![if !ie]><span id=mpnneq0013ph class=MPNNCode
	><img border=0 name=mpeq0013ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0013s2>
	MPEquation()
</script><!-- )MP EQPHNS -->  for
which these diagrams commute:</p><!-- MP EQRA( --><script id=mpeq0013s1>
	MPSetEqnAttrs('eq0013','',3,[[102,13,4,-1,-1],[136,17,5,-1,-1],[171,21,6,-1,-1],[153,19,5,-1,-1],[203,25,7,-1,-1],[254,31,9,-1,-1],[426,51,14,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0013 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0013ph,'')
	</script><layer id=mpeq0013pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0013pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0013 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0013,mpeq0013pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0013s3>
	MPDeleteCode('eq0013')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0012s1>
	MPSetEqnAttrs('eq0012','',3,[[104,13,4,-1,-1],[139,17,5,-1,-1],[174,21,6,-1,-1],[156,19,5,-1,-1],[207,25,7,-1,-1],[258,31,9,-1,-1],[433,51,14,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0012 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0012ph,'')
	</script><layer id=mpeq0012pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0012pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0012 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0012,mpeq0012pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0012s3>
	MPDeleteCode('eq0012')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0011s1>
	MPSetEqnAttrs('eq0011','',3,[[15,13,4,-1,-1],[19,17,5,-1,-1],[24,21,6,-1,-1],[21,19,5,-1,-1],[27,25,7,-1,-1],[35,31,9,-1,-1],[61,51,14,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0011 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0011ph,'')
	</script><layer id=mpeq0011pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0011pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0011 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0011,mpeq0011pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0011s3>
	MPDeleteCode('eq0011')
</script><![endif]><!-- )MP EQ --><!-- MP EQRA( --><script id=mpeq0010s1>
	MPSetEqnAttrs('eq0010','',3,[[13,13,4,-1,-1],[16,17,5,-1,-1],[20,21,6,-1,-1],[18,19,5,-1,-1],[23,25,7,-1,-1],[29,31,9,-1,-1],[50,51,14,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0010 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0010ph,'')
	</script><layer id=mpeq0010pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0010pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0010 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0010,mpeq0010pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0010s3>
	MPDeleteCode('eq0010')
</script><![endif]><!-- )MP EQ -->

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_1" o:spid="_x0000_i1025" type="#_x0000_t75" alt="Description: naturality"
 style='width:321.4pt;height:87.7pt;visibility:visible'>
 <v:imagedata src="Forms_files/image005.jpg" o:title="naturality"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=491 height=134
src="Forms_files/image006.jpg" alt="Description: naturality" v:shapes="Picture_x0020_1"><![endif]></p>

<p class=MsoNormal>If you <a
href="http://en.wikipedia.org/wiki/Commutative_diagram">chase</a> these
diagrams you will discover that they say both these things:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal ><!-- MP EQPHNS( --><script id=mpeq0014s1>
	MPSetEqnAttrs('eq0014','',3,[[6,5,0,-1,-1],[9,7,0,-1,-1],[11,8,0,-1,-1],[11,8,0,-1,-1],[13,10,0,-1,-1],[17,13,0,-1,-1],[28,21,0,-2,-2]])
</script><![if !ie]><span id=mpnneq0014ph class=MPNNCode
	><img border=0 name=mpeq0014ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0014s2>
	MPEquation()
</script><!-- )MP EQPHNS --><!-- MP EQ( --><![if !ie]><div id=mpnneq0014 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0014ph,'')
	</script><layer id=mpeq0014pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0014pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0014 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0014,mpeq0014pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0014s3>
	MPDeleteCode('eq0014')
</script><![endif]><!-- )MP EQ --> is a morphism of directed graphs.</li>
 <li class=MsoNormal ><!-- MP EQPHNS( --><script id=mpeq0015s1>
	MPSetEqnAttrs('eq0015','',3,[[6,5,0,-1,-1],[9,7,0,-1,-1],[11,8,0,-1,-1],[11,8,0,-1,-1],[13,10,0,-1,-1],[17,13,0,-1,-1],[28,21,0,-2,-2]])
</script><![if !ie]><span id=mpnneq0015ph class=MPNNCode
	><img border=0 name=mpeq0015ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0015s2>
	MPEquation()
</script><!-- )MP EQPHNS --><!-- MP EQ( --><![if !ie]><div id=mpnneq0015 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0015ph,'')
	</script><layer id=mpeq0015pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0015pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0015 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0015,mpeq0015pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0015s3>
	MPDeleteCode('eq0015')
</script><![endif]><!-- )MP EQ --> is a <i><a
     href="http://en.wikipedia.org/wiki/Natural_transformation">natural
     transformation</a> </i>from <!-- MP EQPHNS( --><script id=mpeq0016s1>
	MPSetEqnAttrs('eq0016','',3,[[13,13,4,-1,-1],[16,17,5,-1,-1],[20,21,6,-1,-1],[18,19,5,-1,-1],[23,25,7,-1,-1],[29,31,9,-1,-1],[50,51,14,-2,-2]])
</script><![if !ie]><span id=mpnneq0016ph class=MPNNCode
	><img border=0 name=mpeq0016ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0016s2>
	MPEquation()
</script><!-- )MP EQPHNS --><!-- MP EQ( --><![if !ie]><div id=mpnneq0016 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0016ph,'')
	</script><layer id=mpeq0016pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0016pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0016 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0016,mpeq0016pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0016s3>
	MPDeleteCode('eq0016')
</script><![endif]><!-- )MP EQ -->  to
      <!-- MP EQPHNS( --><script id=mpeq0017s1>
	MPSetEqnAttrs('eq0017','',3,[[15,13,4,-1,-1],[19,17,5,-1,-1],[24,21,6,-1,-1],[21,19,5,-1,-1],[27,25,7,-1,-1],[35,31,9,-1,-1],[61,51,14,-2,-2]])
</script><![if !ie]><span id=mpnneq0017ph class=MPNNCode
	><img border=0 name=mpeq0017ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0017s2>
	MPEquation()
</script><!-- )MP EQPHNS --><!-- MP EQ( --><![if !ie]><div id=mpnneq0017 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0017ph,'')
	</script><layer id=mpeq0017pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0017pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0017 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0017,mpeq0017pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0017s3>
	MPDeleteCode('eq0017')
</script><![endif]><!-- )MP EQ -->.</li>
</ul>

<p class=MsoNormal>That is a start on understanding sketches: <i
>Models are functors and morphisms between
models are natural transformations.</i></p>

<h2>Specifying more kinds of structure</h2>

<p class=MsoNormal>Groups, small categories, fields and many other structures
are models of sketches.&nbsp; To show how&nbsp;that happens,&nbsp;I have to say
how to&nbsp;sketch binary operations (to define groups), how to impose
equations (to state the associative law),&nbsp;how to define equalizers (so I
can say how to define composition when the domain of one morphism equals the
codomain of another)&nbsp;, &quot;not equals&quot; (so I can say <!-- MP EQPHNS( --><script id=mpeq0018s1>
	MPSetEqnAttrs('eq0018','',3,[[23,9,0,-1,-1],[32,12,0,-1,-1],[39,15,0,-1,-1],[37,13,1,-1,-1],[49,18,0,-1,-1],[60,22,1,-1,-1],[101,37,1,-2,-2]])
</script><![if !ie]><span id=mpnneq0018ph class=MPNNCode
	><img border=0 name=mpeq0018ph src='&{DSMP.gEmptySrc};' height=1
		width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpeq0018s2>
	MPEquation()
</script><!-- )MP EQPHNS --> ), and many other things.&nbsp;&nbsp;Many
examples of sketches may be found in [<a href="#TTT">TTT</a>] and [<a
href="#CTCS">CTCS</a>]. </p><!-- MP EQRA( --><script id=mpeq0018s1>
	MPSetEqnAttrs('eq0018','',3,[[23,9,0,-1,-1],[32,12,0,-1,-1],[39,15,0,-1,-1],[37,13,1,-1,-1],[49,18,0,-1,-1],[60,22,1,-1,-1],[101,37,1,-2,-2]]);
</script><!-- )MP EQRA --><!-- MP EQ( --><![if !ie]><div id=mpnneq0018 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpeq0018ph,'')
	</script><layer id=mpeq0018pop bgcolor='&{DSMP.gNNPopupBgColor};' z-index=99 visibility=hidden top=0 left=0
		 onmouseover="status=DSMP.gHidePopupMessage"  onmouseout="status=''" 
		><a href='&{DSMP.gPopupEqnSrc};' onmousedown='return MPHidePopup(event,mpeq0018pop)'
			><img border=0 src='&{DSMP.gPopupEqnSrc};' hspace='&{DSMP.gPopupEqnPadding};' vspace='&{DSMP.gPopupEqnPadding};'
		></a></layer><layer id=mpeq0018 bgcolor='' z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		 onmouseover="status=DSMP.gShowPopupMessage" onmouseout="status=''" 
		><a href='&{DSMP.gScreenEqnSrc};' onmousedown='return MPShowPopup(mpeq0018,mpeq0018pop,event)'
			><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
		></a></layer></div><script id=mpeq0018s3>
	MPDeleteCode('eq0018')
</script><![endif]><!-- )MP EQ -->

<p class=MsoNormal>We can go further and sketch special kinds of categories
(cartesian closed, toposes, and others) which we will need to do to create
forms with more power than sketches.&nbsp; </p>

<h1>The sketch for an endofunction</h1>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_3" o:spid="_x0000_i1026" type="#_x0000_t75" alt="Description: Loop"
 style='width:34.7pt;height:45.8pt;visibility:visible'>
 <v:imagedata src="Forms_files/image007.jpg" o:title="Loop"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=53 height=70
src="Forms_files/image008.jpg" alt="Description: Loop" v:shapes="Picture_x0020_3"><![endif]></p>

<p class=MsoNormal>Let <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75"
 style='width:11.8pt;height:13.75pt'>
 <v:imagedata src="Forms_files/image009.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image010.png" v:shapes="_x0000_i1027"><![endif]></span> be the graph above. It has one node<i> c </i>and
one arrow <i>s</i>, whose source and target are (necessarily) <i>c</i>. A model
of this sketch is a set <i>C </i>and a function from <i>C</i> to itself. Any
such function determines a cyclic semigroup of transformations of&nbsp;<i>C</i>.
One particular model is the one in which in which <i>C</i> is the set of
natural numbers and s is the successor function: this is the free semigroup on
one letter.</p>

<p class=MsoNormal>You may want to experiment with other graphs as sketches.
Any graph produces a category of models in sets. Each such category is a
category of presheaves, hence is a topos ([<a href="#TTT">TTT</a>], p. 67,
Theorem 2.4).</p>

<h1>Imposing equations</h1>

<p class=MsoNormal>We need to expand the idea of sketch to be able to define
more kinds of structure. Let’s start with <b >equations</b>.
Suppose we take the sketch for an endofunction and want to modify it so that <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1028" type="#_x0000_t75" style='width:34.05pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image011.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=52 height=26
src="Forms_files/image012.png" v:shapes="_x0000_i1028"><![endif]></span> in every model in <b>Set</b>.
This means we must require that the diagram (in the category of sets) below
commute for every model M.</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_2" o:spid="_x0000_i1029" type="#_x0000_t75" alt="Description: ThreeS"
 style='width:223.85pt;height:118.45pt;visibility:visible'>
 <v:imagedata src="Forms_files/image013.jpg" o:title="ThreeS"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=342 height=181
src="Forms_files/image014.jpg" alt="Description: ThreeS" v:shapes="Picture_x0020_2"><![endif]><o:p></o:p></p>

<p class=MsoNormal>To say that this diagram is <b >commutative</b> (or <b >commutes)</b>
requires that <span style='position:relative;top:7.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1030" type="#_x0000_t75" style='width:140.75pt;height:19pt' o:ole="">
 <v:imagedata src="Forms_files/image015.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=215 height=29
src="Forms_files/image016.png" v:shapes="_x0000_i1030"><![endif]></span> . <a name=model></a></p>

<p class=Fine style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>This use of the word &quot;commutative&quot; is
distinct from the meaning of the word in algebra.  </p>

<p class=Fine style='margin-left:.5in;text-indent:-.25in'><span
style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Saying exactly what “this diagram is commutative”
means for any particular&nbsp;diagram requires fussiness. Chapter 2 of [GBLS]
goes into excruciating detail about this.</p>

<p class=MsoNormal>The obvious way to do this is to say that we require a model
to be a functor from the graph <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1031" type="#_x0000_t75"
 style='width:11.8pt;height:13.75pt'>
 <v:imagedata src="Forms_files/image009.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image010.png" v:shapes="_x0000_i1031"><![endif]></span> to the category of sets that has the property
that the image of the diagram</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="_x0000_i1032" type="#_x0000_t75" alt="Description: BareTriangle" style='width:157.75pt;
 height:101.45pt;visibility:visible'>
 <v:imagedata src="Forms_files/image017.jpg" o:title="BareTriangle"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=241 height=155
src="Forms_files/image018.jpg" alt="Description: BareTriangle" v:shapes="_x0000_i1032"><![endif]><o:p></o:p></p>

<p class=MsoNormal>under M is a <i>commutative diagram in the category of sets.</i>
<a name=FC>We say that this diagram is </a><b>formally commutative</b>. In
general, in sketch theory, something is <b>formally</b> P if in every model of
the sketch its image is required to be P.</p>

<p class=Fine>To say that the diagram <i >itself</i>
is commutative is meaningless.  It is a
diagram in a graph, which has no notion of composition of arrows.  </p>

<p class=MsoNormal><a name=LS></a>This gives us a more general notion of sketch
which allows the specification of equations, although so far only between unary
operations. Formally, a <b>linear sketch</b> <span style='position:relative;
top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1033"
 type="#_x0000_t75" style='width:32.75pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image019.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=50 height=24
src="Forms_files/image020.png" v:shapes="_x0000_i1033"><![endif]></span> consists of a graph <b>G</b>
together with a set <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1034" type="#_x0000_t75"
 style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image021.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image022.png" v:shapes="_x0000_i1034"><![endif]></span> of zero or more
formally commutative diagrams. It should be apparent that an linear sketch can
specify anything that a universal algebra signature with only unary operations
can specify. </p>

<h1>Models in arbitrary categories</h1>

<p class=MsoNormal>A model in Set of a linear sketch <span style='position:
relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1035"
 type="#_x0000_t75" style='width:51.05pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image023.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=78 height=24
src="Forms_files/image024.png" v:shapes="_x0000_i1035"><![endif]></span> is a graph morphism <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1036" type="#_x0000_t75" style='width:68.05pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image025.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=104 height=21
src="Forms_files/image026.png" v:shapes="_x0000_i1036"><![endif]></span> with the property that
M takes every diagram in <i >D </i>to a
commutative diagram in Set. &nbsp;</p>

<p class=Fine><i >This definition would still
be meaningful if we replaced <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1037" type="#_x0000_t75"
 style='width:22.25pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image027.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=34 height=21
src="Forms_files/image028.png" v:shapes="_x0000_i1037"><![endif]></span> by any category
whatever. </i>So now we can talk about a model of <span style='position:relative;
top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1038"
 type="#_x0000_t75" style='width:11.8pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image029.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image030.png" v:shapes="_x0000_i1038"><![endif]></span> in any category<b> <i>C</i></b>.
For example, a model in the category of groups of the endofunction sketch above
that requires the cube to be the identity function is simply a group with a
specified automorphism of order 1 or 3. Indeed, in any category of structures
of a certain type, a model is a structure of that type with a specified
automorphism of order 1 or 3.</p>

<p class=MsoNormal>The more elaborate sketches we construct later will still
allow models in any category. For example, a model of the sketch for groups
(see [<a href="#TTT">TTT</a>] starting on page 126) in the category of
Hausdorff spaces is precisely a Hausdorff topological group. </p>

<p class=Fine>Ancient cute theorem: A model of the sketch for groups in the
category of groups is an Abelian group. That’s because the group operations
must be homomorphisms!</p>

<h1>Clones and theories</h1>

<p class=MsoNormal>Sketches as I have described them so far can now describe
some kinds of <a href="http://en.wikipedia.org/wiki/Universal_algebra">universal
algebras</a>, namely those with unary operations and equations.&nbsp; <i>n</i>-ary
operations and more elaborate constructions will come <a href="#_FP_sketches">later</a>.</p>

<p class=MsoNormal>The first big construction in universal algebra is that of
the <a href="http://en.wikipedia.org/wiki/Clone_%28algebra%29">clone</a><b> </b>of
a <b>type of algebra<i> </i></b>(commonly called a <b>signature</b>): a
specific set of <i>n</i>-ary operations for various <i>n</i> and specific
equations involving those operations.&nbsp; The clone is essentially all the
expressions you can create from the operations, requiring two expressions to be
equivalent if you can prove they are equivalent given the equations of the
algebra.&nbsp; </p>

<p class=Fine>For example, in the clone for groups, <i>x</i>(<i>y(xy</i>)) is
equivalent to (<i>xy</i>)(<i>x</i>y<i>)</i>.&nbsp; On the other hand, <i>xy </i>is
not equivalent to <i>yx </i>because there are noncommutative groups, so <i>xy =
yx </i>can’t possibly follow from the equations. </p>

<p class=MsoNormal>The <a href="http://en.wikipedia.org/wiki/Lawvere_theory">Lawvere
theory</a> of the algebra is a different construction which essentially
expresses the clone as a special kind of category, with models of the theory
being product-preserving functors.</p>

<p class=MsoNormal>In <a href="http://en.wikipedia.org/wiki/Model_theory">model
theory</a> a <b>first-order theory </b>is an extension of the concept of clone
that allows relations other than equality, as well as the use of negation and
quantifiers.&nbsp; First order theories are constructed in a different way from
clones and Lawvere theories but they capture the same general idea in the
bigger context.<a name=cattheory></a></p>

<h1>The cattheory of a sketch</h1>

<p class=MsoNormal>For a sketch, the idea equivalent to the clones and theories
just described is that of a <b>cattheory. </b>(This is a new coinage.&nbsp; See
<b>Terminology</b> below.)</p>

<p class=MsoNormal>Suppose we have a linear sketch <span style='position:relative;
top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1039"
 type="#_x0000_t75" style='width:55pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image031.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=84 height=24
src="Forms_files/image032.png" v:shapes="_x0000_i1039"><![endif]></span> where <b>G</b> is a graph
and <i>D</i> is a set of <a
href="http://sixwingedseraph.wordpress.com/2009/06/05/definitions-into-mathematical-objects-2#FC">formally
commutative</a> diagrams. &nbsp;The <b>cattheory </b>of the linear sketch,
denoted by <span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1040" type="#_x0000_t75" style='width:51.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image033.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=24
src="Forms_files/image034.png" v:shapes="_x0000_i1040"><![endif]></span>, is the <a href="http://en.wikipedia.org/wiki/Free_object">free
category</a><b> </b>generated by <b>G </b>with the condition imposed that the
diagrams in <i>D </i>must become commutative.&nbsp; The graph morphism <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1041" type="#_x0000_t75" style='width:94.9pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image035.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=145 height=24
src="Forms_files/image036.png" v:shapes="_x0000_i1041"><![endif]></span> that takes the nodes
and arrows in <b>G </b>to the corresponding objects and arrows of the free
category is by definition a model of the sketch <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1042"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image037.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1042"><![endif]></span>. <i>G</i> is called the <b>generic model </b>of the sketch.</p>

<p class=MsoNormal>A <b>model</b> of the cattheory <span style='position:relative;
top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1043"
 type="#_x0000_t75" style='width:51.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image039.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=24
src="Forms_files/image034.png" v:shapes="_x0000_i1043"><![endif]></span> in a category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1044" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image040.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1044"><![endif]></span> is simply a functor <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1045" type="#_x0000_t75" style='width:96.2pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image042.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=147 height=24
src="Forms_files/image043.png" v:shapes="_x0000_i1045"><![endif]></span>.&nbsp; We don’t have to impose properties on the functor
because functors automatically preserve commutative diagrams.&nbsp; When we get
into more complicated structures we will have to add preservation requirements
on the model functor.&nbsp;</p>

<p class=MsoNormal>The category of models of the linear sketch <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1046" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image044.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1046"><![endif]></span> in a category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1047" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image045.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1047"><![endif]></span> is denoted by <span
style='position:relative;top:7.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1048" type="#_x0000_t75" style='width:56.3pt;height:20.3pt' o:ole="">
 <v:imagedata src="Forms_files/image046.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=86 height=31
src="Forms_files/image047.png" v:shapes="_x0000_i1048"><![endif]></span>.&nbsp; The category of models of the cattheory <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1049" type="#_x0000_t75" style='width:51.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image048.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=24
src="Forms_files/image034.png" v:shapes="_x0000_i1049"><![endif]></span> in <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1050" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image049.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1050"><![endif]></span> is denoted by <span
style='position:relative;top:7.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1051" type="#_x0000_t75" style='width:96.85pt;height:20.3pt'
 o:ole="">
 <v:imagedata src="Forms_files/image050.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=148 height=31
src="Forms_files/image051.png" v:shapes="_x0000_i1051"><![endif]></span>.  By definition of
&quot;free&quot;, any model <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1052" type="#_x0000_t75"
 style='width:55pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image052.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=84 height=21
src="Forms_files/image053.png" v:shapes="_x0000_i1052"><![endif]></span> induces a unique model
<span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1053" type="#_x0000_t75" style='width:98.85pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image054.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=151 height=26
src="Forms_files/image055.png" v:shapes="_x0000_i1053"><![endif]></span> for which <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1054" type="#_x0000_t75" style='width:51.7pt;height:15.05pt'
 o:ole="">
 <v:imagedata src="Forms_files/image056.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=23
src="Forms_files/image057.png" v:shapes="_x0000_i1054"><![endif]></span>.  </p>

<p class=Fine>I defined a model of <span style='position:relative;top:5.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1055" type="#_x0000_t75"
 style='width:55pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image058.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=84 height=24
src="Forms_files/image032.png" v:shapes="_x0000_i1055"><![endif]></span> in <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1056" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image059.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1056"><![endif]></span> as a graph morphism <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1057" type="#_x0000_t75" style='width:56.3pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image060.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=86 height=21
src="Forms_files/image061.png" v:shapes="_x0000_i1057"><![endif]></span>, but in the previous paragraph I referred to a model <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1058" type="#_x0000_t75" style='width:55pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image062.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=84 height=21
src="Forms_files/image053.png" v:shapes="_x0000_i1058"><![endif]></span>.  This is the standard
<a href="http://en.wikipedia.org/wiki/Abuse_of_notation">abuse of notation</a>
used everywhere in math: Deliberately not distinguishing a structure from its
underlying set.  (See &quot;abuse of
notation&quot; in <a href="http://en.wikipedia.org/wiki/Abuse_of_notation">Wikipedia</a>
and in [<a href="#Hbk">Hbk</a>].)</p>

<p class=MsoNormal>The cattheory has this universal property:</p>

<p class=MsoNormal><a name=LinSkThm><b>Theorem</b></a> The map <span
style='position:relative;top:7.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1059" type="#_x0000_t75" style='width:217.95pt;height:20.3pt'
 o:ole="">
 <v:imagedata src="Forms_files/image063.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=333 height=31
src="Forms_files/image064.png" v:shapes="_x0000_i1059"><![endif]></span></p>

<p class=MsoNormal>is an equivalence of categories. </p>

<p class=MsoNormal>This theorem forces the cattheory to be determined up to
natural equivalence of categories that commutes with the generic model.&nbsp;
For all practical purposes, a model of the sketch is thus the same thing as a
model of its cattheory.&nbsp; This will remain true as we go up the hierarchy
of new constructions (<i>n</i>-ary operations, limits and colimits, and other
things) and is the defining property of the cattheory.&nbsp; &nbsp;Clones,
Lawvere theories and first order theories are all cattheories up to
equivalence.</p>

<h1>How to think about cattheories</h1>

<p class=MsoNormal><span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1060" type="#_x0000_t75"
 style='width:51.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image065.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=24
src="Forms_files/image034.png" v:shapes="_x0000_i1060"><![endif]></span> &nbsp;may be thought
of as the <i>minimal category that contains a model of <span style='position:
relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1061"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image066.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1061"><![endif]></span></i>, the model being the generic model <i>G. </i>Every model
<i>M </i>of <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1062" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image067.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1062"><![endif]></span> in any category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1063" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image068.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1063"><![endif]></span> must induce a unique
(up to natural isomorphism) model of <span style='position:relative;top:5.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1064" type="#_x0000_t75"
 style='width:51.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image069.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=24
src="Forms_files/image034.png" v:shapes="_x0000_i1064"><![endif]></span> in <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1065" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image070.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1065"><![endif]></span>, simply because everything in <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1066"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image071.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1066"><![endif]></span> must be there because
any category containing a model of <span style='position:relative;top:2.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1067" type="#_x0000_t75"
 style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image072.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1067"><![endif]></span>&nbsp;must have everything in <span style='position:relative;
top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1068"
 type="#_x0000_t75" style='width:51.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image073.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=79 height=24
src="Forms_files/image034.png" v:shapes="_x0000_i1068"><![endif]></span>.</p>

<p class=MsoNormal>For example, consider the sketch for endofunctions above.&nbsp;&nbsp;
Because <i>s </i>is in the graph of the sketch, every power of <i>M</i>(<i>s</i>)<i>
</i>must be in any category <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1069" type="#_x0000_t75"
 style='width:11.15pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image074.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1069"><![endif]></span> containing a model <i>M
</i>of the sketch.&nbsp; This forces by induction a unique functor <i
>M'</i> from the cattheory of the sketch to <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1070" type="#_x0000_t75" style='width:13.75pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image075.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=21 height=21
src="Forms_files/image076.png" v:shapes="_x0000_i1070"><![endif]></span>(Usually the induced functor is unique only up to natural
isomorphism, but this time it is rilly rilly unique.)</p>

<h1>Terminology</h1>

<p class=MsoNormal>The remarks in this section apply in general to all kinds of
sketches, not just the restricted version we are considering here.</p>

<p class=MsoNormal>The situation in the literature is confusing.</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal >In [<a
     href="#TTT">TTT</a>] and in the other books and articles by Michael Barr
     and/or me, we call the cattheory the <b>theory.</b></li>
 <li class=MsoNormal >In [<a
     href="#GBLS">GBLS</a>], Atish Bagchi and I refer to the cattheory of a
     finite limit sketch as a theory or as a <b>categorial theory<i> </i></b>in
     an attempt to distinguish it from some version or other of logical
     theory.&nbsp; We said “categorial theory” instead of “categorical theory”
     because the latter phrase means something different to logicians.&nbsp;
     Unfortunately, “categorial” means something different to linguists!</li>
 <li class=MsoNormal >In [<a
     href="#SkEl">SkEl</a>], Johnstone calls the cattheory of a sketch the <b>syntactic
     category.</b></li>
 <li class=MsoNormal >In [<a
     href="#GBLS">GBLS</a>], page 33, we refer to <b>SynCat[ </b><i>f </i><b>]</b>,
     where <i>f</i> is a form (generalized sketch).&nbsp; Now <i>f</i> has a
     cattheory, but it is <i>not </i><b>SynCat[ </b><i>f </i><b>], </b>which is
     the cattheory correspond to the <b>doctrine </b>that <i>f</i> belongs to
     (the type of categories it can have models in.)</li>
</ul>

<p class=MsoNormal>I am using “cattheory” so that I will have a neologism that
doesn’t mean anything different to anybody.&nbsp; Personally, I think we should
keep using “theory”, because the theory (syntactic category in the sense of
Johnstone) is ultimately the same thing (satisfies the same universal property)
as the corresponding logical theory; the difference is only in the
construction.</p>

<h1>Products</h1>

<p class=MsoNormal>A (binary) <b>product diagram </b>in a category is a <a
href="http://en.wikipedia.org/wiki/Cone_%28category_theory%29">cone to</a>
{a,b}, in other words a diagram that looks like this </p>

<p class=MsoNormal>(1)<!--[if gte vml 1]><v:shape
 id="Picture_x0020_10" o:spid="_x0000_i1071" type="#_x0000_t75" alt="Description: TwistedProductDiagram"
 style='width:155.8pt;height:115.2pt;visibility:visible'>
 <v:imagedata src="Forms_files/image077.jpg" o:title="TwistedProductDiagram"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=238 height=176
src="Forms_files/image078.jpg" alt="Description: TwistedProductDiagram" v:shapes="Picture_x0020_10"><![endif]></p>

<p class=MsoNormal>with this specific <a
href="http://en.wikipedia.org/wiki/Universal_property">universal property</a>:&nbsp;
For <span style='color:blue'>any other cone to {a,b}</span>, <!--[if gte vml 1]><v:shape
 id="_x0000_s1030" type="#_x0000_t75" style='position:absolute;margin-left:0;
 margin-top:0;width:181.7pt;height:113.55pt;z-index:251658240;
 mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical:top;mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="Forms_files/image079.jpg" o:title="PreSawHorse"
  cropbottom="14672f"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=278 height=173
src="Forms_files/image080.jpg" align=left hspace=12 v:shapes="_x0000_s1030"><![endif]><o:p></o:p></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>(2)</p>

<p class=MsoNormal>there is a <a name=ufi><span style='color:red'>unique
fill-in arrow <b>fi </b></span></a>such that this diagram commutes:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape id="_x0000_s1031" type="#_x0000_t75"
 style='position:absolute;margin-left:0;margin-top:0;width:190pt;height:102.2pt;
 z-index:251659264;mso-position-horizontal:left;mso-position-vertical:top;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="Forms_files/image081.jpg" o:title="SawHorse2" cropbottom="6521f"/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=290 height=156
src="Forms_files/image082.jpg" align=left hspace=12 v:shapes="_x0000_s1031"><![endif]></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>(3)</p>

<p class=MsoNormal>This diagram has been called a <b>sawhorse. </b>But like
most <a href="/MM/MMImagesMetaphors.htm#dangerous">metaphors</a>
in math, this name is misleading.&nbsp; </p>

<h2>How to think about the sawhorse</h2>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal >The sawhorse is <b><i>not
     symmetrical </i></b>with respect to its two pairs of legs.&nbsp; The black
     (right) legs form a product cone but the <b><i>blue </i></b><i>(left)<b> legs need not be a product
     diagram. </b></i>It could be called a <b>directed sawhorse.</b></li>
 <li class=MsoNormal >The construction of the
     fill-in arrow is like an algebraic operation whose domain is the set of
     diagrams of the form (2) for a fixed product diagram (1)&nbsp; and whose
     output is the fill-in arrow.&nbsp;&nbsp; Now ordinary algebraic operations
     have domain some cartesian product of sets with output in a set.&nbsp; For
     example scalar multiplication of a real vector space is an operation <span
     style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1072" type="#_x0000_t75" style='width:58.25pt;height:13.1pt'
      o:ole="">
      <v:imagedata src="Forms_files/image083.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=89 height=20
     src="Forms_files/image084.png" v:shapes="_x0000_i1072"><![endif]></span>.&nbsp; The fill-in arrow is an operation on a set of<i
     > tuples of arrows</i>, but the domain
     is not the cartesian products of arrow sets; instead it is an <b><i>equationally
     defined subset </i></b>of a cartesian product of arrow sets (the equation says
     that the source of one must match the product of the other).</li>
 <li class=MsoNormal >The colors in the
     sawhorse correspond to the quantifiers in the definition of the diagram:  Given a cone from <i >x</i> to {<i >a, b</i>}, then <span
     class=BlueChar>for
     any other cone from any object y to {a,b}</span><span
     style='color:blue'>, </span><span class=RedChar>there is a unique fill-in arrow <b style='mso-bidi-font-weight:
     normal'>fi</b> from<i style='mso-bidi-font-style:normal'> a</i> to<i
     style='mso-bidi-font-style:normal'> b </i>such that the sawhorse commutes</span><i
     ><span style='color:red'>.<b> </b></span></i></li>
 <li class=MsoNormal ><b><i ><span style='color:red'> </span></i></b>By
     making the blue cone also a product diagram you get an instant proof that
     the resulting <b><span style='color:red'>fi</span></b> is an isomorphism,
     in fact the only isomorphism making the sawhorse commute.&nbsp; Thus
     &quot;<i >products in a category are
     determined up to a unique isomorphism&quot;</i>.</li>
</ol>

<p class=MsoNormal>Chapter 5 of [<a href="#CTCS">CTCS</a>] gives a detailed
explanation of products in categories at a rather elementary level.</p>

<h2>Finite products</h2>

<p class=MsoNormal>Finite products <!-- MP SYPH( --><script id=mpch0001s1>
	MPSetChAttrs('ch0001','ch0',[[7,1,-2,1,0],[8,1,-3,0,0],[10,2,-4,0,0],[],[],[],[25,4,-10,0,0]])
</script><![if !ie]><span id=mpnnch0001ph class=MPNNCode
	><img border=0 name=mpch0001ph src='&{DSMP.gEmptySrc};' height=1 width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpch0001s2>
	MPInlineChar(0)
</script><!-- )MP SYPH --> products of a finite number of objects in a
category -- can be define analogously.&nbsp; However, if you assume you have
all products of two objects then you automatically get all finite products of
two or more elements.&nbsp; It is an easy exercise to see that every category
has all products of one object.&nbsp; A product of no objects is a <a
href="http://en.wikipedia.org/wiki/Terminal_object">terminal object</a> and
that has to be assumed separately.  Not
all categories have a terminal object, for example the category you get if the
singleton groups and the arrows to and from them are untimely ripp’d from the category
of groups <!-- MP SYPH( --><script id=mpch0002s1>
	MPSetChAttrs('ch0002','ch1',[[12,1,-2,1,0],[14,1,-3,0,0],[18,2,-4,0,0],[],[],[],[45,4,-10,0,0]])
</script><![if !ie]><span id=mpnnch0002ph class=MPNNCode
	><img border=0 name=mpch0002ph src='&{DSMP.gEmptySrc};' height=1 width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpch0002s2>
	MPInlineChar(0)
</script><!-- )MP SYPH --> it has all products of finite nonempty sets of
objects but no terminal object.</p><!-- MP SYRA( --><script id=mpch0002s1>
	MPSetChAttrs('ch0002','ch1',[[12,1,-2,1,0],[14,1,-3,0,0],[18,2,-4,0,0],[],[],[],[45,4,-10,0,0]])
</script><!-- )MP SYRA --><!-- MP SY( --><![if !ie]><div id=mpnnch0002 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpch0002ph,'')
	</script><layer id=mpch0002 z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
	></layer></div><script id=mpch0002s3>
	MPDeleteCode('ch0002')
</script><![endif]><!-- )MP SY --><!-- MP SYRA( --><script id=mpch0001s1>
	MPSetChAttrs('ch0001','ch0',[[7,1,-2,1,0],[8,1,-3,0,0],[10,2,-4,0,0],[],[],[],[25,4,-10,0,0]])
</script><!-- )MP SYRA --><!-- MP SY( --><![if !ie]><div id=mpnnch0001 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpch0001ph,'')
	</script><layer id=mpch0001 z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
	></layer></div><script id=mpch0001s3>
	MPDeleteCode('ch0001')
</script><![endif]><!-- )MP SY -->

<p class=MsoNormal>A category <b>has finite products </b>if there is a product
diagram for any finite set of objects.<a name=FPSketch></a></p>

<h1><a name="_FP_sketches"></a>FP sketches</h1>

<p class=MsoNormal>An <b>FP sketch </b>is a graph together with some&nbsp;
specified formally commutative diagrams and some specified formal product
diagrams.&nbsp; A <b>model </b>of an FP sketch in a category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1073" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image085.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1073"><![endif]></span> is a functor from the graph to <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1074" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image085.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1074"><![endif]></span> that takes the specified formally
commutative diagrams to commutative diagrams and the specified formal product
diagrams to product diagrams.</p>

<p class=MsoNormal>The category of all algebras for any specified type of
universal algebra (with finitary operations) is&nbsp; equivalant to the
category of models of an FP sketch.&nbsp; Chapter 4 of [<a href="#TTT">TTT</a>]
describes an FP sketch for the category of groups starting on page 126.</p>

<h2><a name="_On_the_nose"></a>On the nose</h2>

<p class=MsoNormal>The homomorphisms in the category of models of an FP sketch
must preserve the designated product diagrams <b >on the nose</b>.&nbsp; For example, the sketch for groups just
mentioned has three designated formal product cones, for the terminal object,
for <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1075" type="#_x0000_t75" style='width:17pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image086.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=26 height=26
src="Forms_files/image087.png" v:shapes="_x0000_i1075"><![endif]></span> and for <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1076" type="#_x0000_t75" style='width:17pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image088.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=26 height=26
src="Forms_files/image089.png" v:shapes="_x0000_i1076"><![endif]></span>.&nbsp; The formal binary operation is an arrow <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1077" type="#_x0000_t75" style='width:62.85pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image090.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=96 height=26
src="Forms_files/image091.png" v:shapes="_x0000_i1077"><![endif]></span>.  &quot;On the
nose&quot; means that in a model the binary operation must have domain <i
>the exact copy of <span style='position:
relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1078"
 type="#_x0000_t75" style='width:32.05pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image092.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=49 height=21
src="Forms_files/image093.png" v:shapes="_x0000_i1078"><![endif]></span> that is the value of
the model at <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1079" type="#_x0000_t75" style='width:17pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image094.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=26 height=26
src="Forms_files/image087.png" v:shapes="_x0000_i1079"><![endif]></span></i> .  <b><i>This is just a technicality, </i></b> although some mathematicians make a big deal
out of it.&nbsp; In fact when mathematicians talk about the “category of
groups” they <i >never</i> say which product
cone they mean by <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1080" type="#_x0000_t75" style='width:17pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image095.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=26 height=26
src="Forms_files/image087.png" v:shapes="_x0000_i1080"><![endif]></span> and <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1081" type="#_x0000_t75" style='width:17pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image096.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=26 height=26
src="Forms_files/image089.png" v:shapes="_x0000_i1081"><![endif]></span>.</p>

<h1>Finite Limits</h1>

<p class=MsoNormal>Review: a<b> </b>cone
to a <i >set</i> <span style='position:relative;
top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1082"
 type="#_x0000_t75" style='width:11.15pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image097.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image098.png" v:shapes="_x0000_i1082"><![endif]></span> of objects of a category consists of an
object<i> v</i> of the category and one arrow from <i>v</i> to each object in <!--[if gte vml 1]><v:shape id="Picture_x0020_12"
 o:spid="_x0000_i1083" type="#_x0000_t75" alt="Description: \cal{S}" style='width:8.5pt;
 height:8.5pt;visibility:visible'>
 <v:imagedata src="Forms_files/image099.png" o:title="cal{S}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=13 height=13
src="Forms_files/image100.jpg" alt="Description: \cal{S}" v:shapes="Picture_x0020_12"><![endif]>.&nbsp;
A finite-product diagram is a cone to such a (finite) set with the <a
href="#ufi">unique fill-in property</a>. 
</p>

<p class=MsoNormal>Now suppose we have a finite <b><i>diagram</i></b> <!--[if gte vml 1]><v:shape id="Picture_x0020_11"
 o:spid="_x0000_i1084" type="#_x0000_t75" alt="Description: \cal{D}" style='width:9.8pt;
 height:8.5pt;visibility:visible'>
 <v:imagedata src="Forms_files/image101.png" o:title="cal{D}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=15 height=13
src="Forms_files/image102.jpg" alt="Description: \cal{D}" v:shapes="Picture_x0020_11"><![endif]> in a category.&nbsp; I am specifically
not assuming it is commutative.&nbsp; A <b>commutative cone </b>to <!--[if gte vml 1]><v:shape id="_x0000_i1085" type="#_x0000_t75"
 alt="Description: \cal{D}" style='width:9.8pt;height:8.5pt;visibility:visible'>
 <v:imagedata src="Forms_files/image101.png" o:title="cal{D}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=15 height=13
src="Forms_files/image102.jpg" alt="Description: \cal{D}" v:shapes="_x0000_i1085"><![endif]> is an object <i>v</i>, an arrow(called
a <b>projection) </b>from <i>v</i> to each node of <!--[if gte vml 1]><v:shape id="Picture_x0020_9" o:spid="_x0000_i1086"
 type="#_x0000_t75" alt="Description: \cal{D}" style='width:9.8pt;height:8.5pt;
 visibility:visible'>
 <v:imagedata src="Forms_files/image101.png" o:title="cal{D}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=15 height=13
src="Forms_files/image102.jpg" alt="Description: \cal{D}" v:shapes="Picture_x0020_9"><![endif]>,
with the additional property that each triangle formed by two projections and
an arrow of the diagram must commute.&nbsp; The diagram <!--[if gte vml 1]><v:shape id="_x0000_i1087" type="#_x0000_t75" alt="Description: \cal{D}"
 style='width:9.8pt;height:8.5pt;visibility:visible'>
 <v:imagedata src="Forms_files/image101.png" o:title="cal{D}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=15 height=13
src="Forms_files/image102.jpg" alt="Description: \cal{D}" v:shapes="_x0000_i1087"><![endif]> is called the <b>base diagram </b>of
the cone.</p>

<h2>Example</h2>

<p class=MsoNormal>Here is an example of a base diagram:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape id="Picture_x0020_8" o:spid="_x0000_s1028"
 type="#_x0000_t75" alt="Description: PullbackBase" style='position:absolute;
 margin-left:0;margin-top:0;width:75pt;height:73.5pt;z-index:-251660288;
 visibility:visible;mso-position-horizontal:left;mso-position-vertical:top;
 mso-position-vertical-relative:line' o:allowoverlap="f">
 <v:imagedata src="Forms_files/image103.jpg" o:title="PullbackBase"/>
 <w:wrap type="square" anchory="page"/>
</v:shape><![endif]--><![if !vml]><img width=115 height=112
src="Forms_files/image104.jpg" align=left hspace=12
alt="Description: PullbackBase" v:shapes="Picture_x0020_8"><![endif]></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>(a)</p>

<p class=MsoNormal>A commutative cone over this base will look like the left
diagram below.  The three arrows with
source <i >P</i> are the projections.</p>

<p class=MsoNormal><!--[if gte vml 1]><o:wrapblock><v:shape id="Picture_x0020_7"
  o:spid="_x0000_s1029" type="#_x0000_t75" alt="Description: Pullbacks"
  style='position:absolute;margin-left:0;margin-top:0;width:189.9pt;height:88.35pt;
  z-index:251657216;visibility:visible;mso-position-horizontal:left;
  mso-position-vertical:top'>
  <v:imagedata src="Forms_files/image105.jpg" o:title="Pullbacks"/>
  <w:wrap type="topAndBottom"/>
 </v:shape><![endif]--><![if !vml]><img width=290 height=135
 src="Forms_files/image106.jpg" alt="Description: Pullbacks" v:shapes="Picture_x0020_7"><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
clear=ALL>
Since the triangles involving two projections have to commute, the diagonal
projection is <i>determined </i>by the other two.&nbsp; For this reason, this
particular example is almost always drawn as on the right.  It is called a <b >pullback diagram</b>.</p>

<h2>Two other examples </h2>

<p class=MsoNormal>In each case all the projections are shown on the left and
only the necessary ones on the right.</p>

<p class=MsoNormal><b ><!--[if gte vml 1]><v:shape id="Picture_x0020_6"
 o:spid="_x0000_i1088" type="#_x0000_t75" alt="Description: Equalizers"
 style='width:319.4pt;height:109.95pt;visibility:visible'>
 <v:imagedata src="Forms_files/image107.jpg" o:title="Equalizers"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=488 height=168
src="Forms_files/image108.jpg" alt="Description: Equalizers" v:shapes="Picture_x0020_6"><![endif]></b>(b)</p>

<p class=MsoNormal><b ><!--[if gte vml 1]><v:shape id="Picture_x0020_5"
 o:spid="_x0000_i1089" type="#_x0000_t75" alt="Description: LimitCones"
 style='width:422.2pt;height:205.55pt;visibility:visible'>
 <v:imagedata src="Forms_files/image109.jpg" o:title="LimitCones"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=645 height=314
src="Forms_files/image110.jpg" alt="Description: LimitCones" v:shapes="Picture_x0020_5"><![endif]></b>(c)</p>

<h1>Limit cones</h1>

<p class=MsoNormal>A <b>limit cone </b>over a diagram is a commutative cone
over the diagram with the same unique-fill-in property that product cones
have.&nbsp; For example if this is a limit cone over diagram (a) above</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_4" o:spid="_x0000_i1090" type="#_x0000_t75" alt="Description: PullbackDiagram"
 style='width:82.45pt;height:93.6pt;visibility:visible'>
 <v:imagedata src="Forms_files/image111.jpg" o:title="PullbackDiagram"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=126 height=143
src="Forms_files/image112.jpg" alt="Description: PullbackDiagram" v:shapes="Picture_x0020_4"><![endif]>(d)</p>

<p class=MsoNormal>and the blue arrows on the left below also form a
commutative cone over the same base, then there must be a <span
style='color:red'>unique fill-in arrow </span>making everything commute in the
diagram on the right.<!--[if gte vml 1]><v:shape
 id="_x0000_i1091" type="#_x0000_t75" alt="Description: PullbackSawHorse"
 style='width:337.1pt;height:163pt;visibility:visible'>
 <v:imagedata src="Forms_files/image113.jpg" o:title="PullbackSawHorse"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=515 height=249
src="Forms_files/image114.jpg" alt="Description: PullbackSawHorse" v:shapes="_x0000_i1091"><![endif]></p>

<p class=MsoNormal>This particular shape (d) of limit cone is called a <b>pullback
diagram. </b>A limit cone in the shape of (b) is an <b>equalizer diagram. </b>It
turns out that if you assume that if all pullbacks and equalizers exist, then
you have limit cones over <i>every </i>finite diagram for free.&nbsp; Limit
cones of shape (c) don’t have a common name but they will be referred to later.</p>

<p class=MsoNormal>Since a finite set of objects is just a finite diagram with
no arrows, <i >product diagrams are a special
case of limit diagrams</i>.&nbsp; The commutativity requirement is then
vacuous.</p>

<p class=MsoNormal>A category has all finite limits is called an <b>FL-category.  </b>From the remark in the previous paragraph,
an FP-category is automatically an FL-category<a name=FLSketch></a>; the
diagrams in <!--[if gte vml 1]><v:shape id="_x0000_i1092"
 type="#_x0000_t75" alt="Description: \cal{D}" style='width:9.8pt;height:8.5pt;
 visibility:visible'>
 <v:imagedata src="Forms_files/image101.png" o:title="cal{D}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=15 height=13
src="Forms_files/image102.jpg" alt="Description: \cal{D}" v:shapes="_x0000_i1092"><![endif]> have nodes but no arrows.</p>

<p class=Fine>An older name, which is <a
href="http://en.wikipedia.org/wiki/Deprecate">deprecated</a><i >, </i>is <b>left
exact category.</b></p>

<h1>FL-Sketches</h1>

<p class=MsoNormal>An<b> FL sketch </b>(finite-limit sketch) is a finite graph <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1093" type="#_x0000_t75" style='width:13.1pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image115.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=21
src="Forms_files/image116.png" v:shapes="_x0000_i1093"><![endif]></span> with a finite set <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1094" type="#_x0000_t75" style='width:13.1pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image117.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="Forms_files/image118.png" v:shapes="_x0000_i1094"><![endif]></span> of finite <a
href="http://sixwingedseraph.wordpress.com/2009/06/05/definitions-into-mathematical-objects-2#FC">formally
commutative</a> diagrams and a finite set <span style='position:relative;
top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1095"
 type="#_x0000_t75" style='width:11.15pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image119.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1095"><![endif]></span> of <b>formal limit cones</b> over
finite diagrams (which are <i>not </i>usually among the formally commutative
diagrams.)</p>

<p class=MsoNormal>A <b>model </b>of an FL sketch in an FL category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1096" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image119.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1096"><![endif]></span> is a graph map into
the (underlying graph of) the FL category that take the diagrams in <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1097" type="#_x0000_t75" style='width:13.1pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image120.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=20
src="Forms_files/image118.png" v:shapes="_x0000_i1097"><![endif]></span> to commutative cones
and the cones in <!--[if gte vml 1]><v:shape
 id="Picture_x0020_34" o:spid="_x0000_i1098" type="#_x0000_t75" alt="Description: \mathcal{C}"
 style='width:6.55pt;height:8.5pt;visibility:visible'>
 <v:imagedata src="Forms_files/image121.png" o:title="mathcal{C}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=10 height=13
src="Forms_files/image122.jpg" alt="Description: \mathcal{C}" v:shapes="Picture_x0020_34"><![endif]>&nbsp;
to limit cones.</p>

<p class=MsoNormal>The category of models of the FL sketch <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1099" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image123.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1099"><![endif]></span> in an FL category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1100" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image124.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1100"><![endif]></span> is denoted by <span style='position:
relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1101"
 type="#_x0000_t75" style='width:53pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image125.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=81 height=24
src="Forms_files/image126.png" v:shapes="_x0000_i1101"><![endif]></span>.</p>

<h1>FL cattheories</h1>

<p class=MsoNormal>The <b>FL cattheory </b>of a linear sketch <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1102" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image123.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1102"><![endif]></span> is a category <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1103" type="#_x0000_t75" style='width:70.05pt;height:15.7pt'
 o:ole="">
 <v:imagedata src="Forms_files/image127.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=24
src="Forms_files/image128.png" v:shapes="_x0000_i1103"><![endif]></span>  together with a&nbsp; model <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1104" type="#_x0000_t75" style='width:108pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image129.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=165 height=24
src="Forms_files/image130.png" v:shapes="_x0000_i1104"><![endif]></span> with the the property
that for any model <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1105" type="#_x0000_t75"
 style='width:13.75pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image131.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=21 height=20
src="Forms_files/image132.png" v:shapes="_x0000_i1105"><![endif]></span> of <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1106"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image123.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1106"><![endif]></span> in a category <span style='position:
relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1107"
 type="#_x0000_t75" style='width:11.15pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image133.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1107"><![endif]></span>, there is a <i>unique </i>model <i >M' </i>of <span style='position:
relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1108"
 type="#_x0000_t75" style='width:70.05pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image134.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=24
src="Forms_files/image128.png" v:shapes="_x0000_i1108"><![endif]></span> in  <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1109" type="#_x0000_t75"
 style='width:11.15pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image133.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1109"><![endif]></span>such that</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_21" o:spid="_x0000_i1110" type="#_x0000_t75" alt="Description: GM."
 style='width:149.9pt;height:94.25pt;visibility:visible'>
 <v:imagedata src="Forms_files/image135.jpg" o:title="GM"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=229 height=144
src="Forms_files/image136.jpg" alt="Description: GM." v:shapes="Picture_x0020_21"><![endif]></p>

<p class=MsoNormal>commutes.&nbsp; <i>G </i>is the <b>generic model </b>of <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1111" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image123.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1111"><![endif]></span>.</p>

<p class=MsoNormal>The category of models of the cattheory <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1112" type="#_x0000_t75" style='width:70.05pt;height:15.7pt'
 o:ole="">
 <v:imagedata src="Forms_files/image137.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=24
src="Forms_files/image128.png" v:shapes="_x0000_i1112"><![endif]></span>in <!--[if gte vml 1]><v:shape
 id="Picture_x0020_18" o:spid="_x0000_i1113" type="#_x0000_t75" alt="Description: \mathcal{C}"
 style='width:6.55pt;height:8.5pt;visibility:visible'>
 <v:imagedata src="Forms_files/image121.png" o:title="mathcal{C}"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=10 height=13
src="Forms_files/image122.jpg" alt="Description: \mathcal{C}" v:shapes="Picture_x0020_18"><![endif]> is denoted by <span style='position:
relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1114"
 type="#_x0000_t75" style='width:111.95pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image138.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=171 height=24
src="Forms_files/image139.png" v:shapes="_x0000_i1114"><![endif]></span>. </p>

<p class=MsoNormal>The cattheory has this universal property:</p>

<p class=MsoNormal><b>Theorem</b> <i>The map <span style='position:relative;
top:7.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1115"
 type="#_x0000_t75" style='width:235pt;height:20.3pt' o:ole="">
 <v:imagedata src="Forms_files/image140.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=359 height=31
src="Forms_files/image141.png" v:shapes="_x0000_i1115"><![endif]></span></i></p>

<p class=MsoNormal>is an equivalence of categories. </p>

<p class=MsoNormal>(Compare the <a href="#LinSkThm">corresponding theorem</a>
for linear categories.)</p>

<p class=MsoNormal>This theorem forces the cattheory to be determined up to
natural equivalence of categories that commutes with the generic model.&nbsp;
For all practical purposes, <i>a model of the sketch is thus the same thing as
a model of its cattheory.</i></p>

<h1>FL-sketches and forms</h1>

<p class=MsoNormal>The first key to understanding forms is that all sorts of
interesting kinds of categories (cartesian closed, toposes, symmetric monoidal)
are models of FL-sketches.&nbsp; Indeed, I expect (but haven't proved) that
every kind of <i>n</i>-category that anyone ever defined is a model of an
FL-sketch <!-- MP SYPH( --><script id=mpch0003s1>
	MPSetChAttrs('ch0003','ch1',[[12,1,-2,1,0],[14,1,-3,0,0],[18,2,-4,0,0],[],[],[],[45,4,-10,0,0]])
</script><![if !ie]><span id=mpnnch0003ph class=MPNNCode
	><img border=0 name=mpch0003ph src='&{DSMP.gEmptySrc};' height=1 width='&{DSMP.gPlaceholderWidth};'
></span><![endif]><script id=mpch0003s2>
	MPInlineChar(0)
</script><!-- )MP SYPH --> it <i>doesn’t </i>require anything that might
be called “<i>n</i>-sketches”.&nbsp; However, they will have the same problem
as ordinary categories in that in the category of models the structure has to
be preserved <a href="#_On_the_nose">on the nose</a>.&nbsp; In the case of
FL-sketches for different kinds of 1-categories, the sketch’s model category is
equivalent (but not isomorphic because of the nose problem) to the usual way we
define categories of that kind of category.&nbsp; What “equivalence” means for
“every kind of <i>n</i>-category” is referred to in [<a href="#nLEquiv">nLEquiv</a>].</p><!-- MP SYRA( --><script id=mpch0003s1>
	MPSetChAttrs('ch0003','ch1',[[12,1,-2,1,0],[14,1,-3,0,0],[18,2,-4,0,0],[],[],[],[45,4,-10,0,0]])
</script><!-- )MP SYRA --><!-- MP SY( --><![if !ie]><div id=mpnnch0003 class=MPNNCode
	><script>
		MPNNCalcTopLeft(document.mpch0003ph,'')
	</script><layer id=mpch0003 z-index=98 visibility='visible' top='&{DSMP.gNNLayerTop};' left='&{DSMP.gNNLayerLeft};'
		><img border=0 width='&{DSMP.gScreenEqnWidth};' height='&{DSMP.gScreenEqnHeight};'
			 src='&{DSMP.gPrintEqnSrc};' onload='MPNNSelectScreenEqn(this)'
	></layer></div><script id=mpch0003s3>
	MPDeleteCode('ch0003')
</script><![endif]><!-- )MP SY -->

<h1>Constructing FL cattheories</h1>

<p class=MsoNormal>The linear cattheory of a linear sketch is just the free category
generated by the graph of the sketch, with the formally commutative diagrams
forced to be commutative.&nbsp; It is more complicated to prove the <i
>existence</i> of the FL cattheory of an FL
sketch.&nbsp; Once you do show it exists, it follows easily from the definition
that it is uniquely determined up to equivalence of categories.</p>

<p class=MsoNormal>There are two approaches to showing the existence of the FL
cattheory.</p>

<h2>As a fixed point</h2>

<p class=MsoNormal>Introduce an operator on categories that adjoins diagrams
that in effect add limit cones to finite diagrams that don’t already have
limits.&nbsp; This is done in lots of detail in sections 4.2 and 4.3 of [<a
href="#GBLS">GLBS</a>].&nbsp; Starting with an FL-sketch <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1116" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image142.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1116"><![endif]></span> , the cattheory <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1117" type="#_x0000_t75" style='width:70.05pt;height:15.7pt'
 o:ole="">
 <v:imagedata src="Forms_files/image143.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=24
src="Forms_files/image128.png" v:shapes="_x0000_i1117"><![endif]></span>  is the minimum fixpoint of this operator.</p>

<p class=Fine>This is the computer-sciencey way of doing it.&nbsp; Each arrow
and commutative diagram in the theory is <i>constructed explicitly. </i>When [GLBS]
constructs proofs, this step-by-step construction corresponds to the inductive
construction of formulas and rules of inference in classical string-based
logic.</p>

<h2>Embedded in a functor category</h2>

<p class=MsoNormal>Given an FL sketch <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1118"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image144.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1118"><![endif]></span>, the category <span style='position:relative;top:5.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1119" type="#_x0000_t75"
 style='width:64.15pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image145.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=98 height=24
src="Forms_files/image146.png" v:shapes="_x0000_i1119"><![endif]></span>  of models of <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1120"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image147.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1120"><![endif]></span> in the category of sets turns out to be
a full reflective subcategory of the <a
href="http://en.wikipedia.org/wiki/Presheaf_(category_theory)">presheaf
category</a> <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1121" type="#_x0000_t75" style='width:28.15pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image148.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=43 height=26
src="Forms_files/image149.png" v:shapes="_x0000_i1121"><![endif]></span> .</p>

<p class=MsoNormal>Let’s spell out what this means: the models are
finite-limit-preserving functors and the presheaf category contains all
functors.&nbsp; The reflectivity means that the embedding has a left adjoint,
which implies that a limit of a diagram in the model category is also the limit
of the diagram in the presheaf category.&nbsp; The fullness means that <i>every</i>
natural transformation between models is a morphism of models. Using these
facts you can get an embedding of <span style='position:relative;top:2.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1122" type="#_x0000_t75"
 style='width:22.25pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image150.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=34 height=24
src="Forms_files/image151.png" v:shapes="_x0000_i1122"><![endif]></span>   in <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1123" type="#_x0000_t75"
 style='width:28.15pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image152.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=43 height=26
src="Forms_files/image149.png" v:shapes="_x0000_i1123"><![endif]></span> ;  <span style='position:relative;top:5.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1124" type="#_x0000_t75"
 style='width:70.05pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image153.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=24
src="Forms_files/image128.png" v:shapes="_x0000_i1124"><![endif]></span>is then the full FL subcategory generated by the image of the
embedding.</p>

<p class=MsoNormal>This is worked out in detail for the FP case in [<a
href="#TTT">TTT</a>], Chapter 4.3.&nbsp; The construction is then carefully
described for the FL case&nbsp; in Chapter 4.4, but the proof is omitted.&nbsp;
It is quite analogous to the FP case.</p>

<p class=MsoNormal>I have been focusing here on the FL case because that is the
foundation of the construction of forms in [<a href="#GBLS">GBLS</a>].</p>

<h1>FP Sketches</h1>

<p class=MsoNormal>An <b>FP sketch </b><span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1125"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image144.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1125"><![endif]></span><b> </b>and its FP
cattheory<span style='position:relative;
top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1126"
 type="#_x0000_t75" style='width:70.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image154.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=108 height=24
src="Forms_files/image155.png" v:shapes="_x0000_i1126"><![endif]></span> are defined in
the same way, except that the finite diagrams that the cones are over have to
be discrete, and it has properties analogous to those for FL sketches given
above.&nbsp; Note that any FP sketch or&nbsp; linear sketch will also have an
FL cattheory.</p>

<h1><a name="_The_sketch_for"></a>The sketch for categories</h1>

<p class=MsoNormal>FL sketches (finite-limit sketches) makes it possible to
construct a <b>sketch for categories. </b>To do this you need some <b>nodes</b>:</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1127" type="#_x0000_t75"
 style='width:18.35pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image156.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=21
src="Forms_files/image157.png" v:shapes="_x0000_i1127"><![endif]></span>, which in a model will become the set of objects --&nbsp; so
in our &quot;formal&quot; terminology&nbsp; is the formal set of objects.&nbsp;
(This terminology, by the way, is due to John W. Gray.)</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1128" type="#_x0000_t75"
 style='width:15.7pt;height:11.8pt' o:ole="">
 <v:imagedata src="Forms_files/image158.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=24 height=18
src="Forms_files/image159.png" v:shapes="_x0000_i1128"><![endif]></span>, the formal set of arrows.</p>

<p class=MsoNormal><span style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1129" type="#_x0000_t75"
 style='width:19pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image160.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=29 height=28
src="Forms_files/image161.png" v:shapes="_x0000_i1129"><![endif]></span>, the formal set of composable pairs of arrows.</p>

<p class=MsoNormal><span style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1130" type="#_x0000_t75"
 style='width:19pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image162.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=29 height=28
src="Forms_files/image163.png" v:shapes="_x0000_i1130"><![endif]></span>, the formal set of composable triples of arrows, needed to
state the associative law.</p>

<p class=MsoNormal>It needs many <b>arrows</b>, some of which are:</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1131" type="#_x0000_t75"
 style='width:75.95pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image164.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=116 height=21
src="Forms_files/image165.png" v:shapes="_x0000_i1131"><![endif]></span> that formally picks
the identity arrow of an object</p>

<p class=MsoNormal><span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1132" type="#_x0000_t75"
 style='width:130.9pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image166.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=200 height=24
src="Forms_files/image167.png" v:shapes="_x0000_i1132"><![endif]></span> that formally pick the
source and target of an arrow.</p>

<p class=MsoNormal><span style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1133" type="#_x0000_t75"
 style='width:87.05pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image168.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=133 height=28
src="Forms_files/image169.png" v:shapes="_x0000_i1133"><![endif]></span> that formally picks
out the composite of a pair of arrows.</p>

<p class=MsoNormal>...as well as many structural arrows that, for example, pick
out the first arrow in a composable chain, or that picks out the pair of arrows
<span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1134" type="#_x0000_t75" style='width:58.9pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image170.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=90 height=24
src="Forms_files/image171.png" v:shapes="_x0000_i1134"><![endif]></span> given a composable
triple.</p>

<h2>Cones and diagrams</h2>

<p class=MsoNormal>Of course, you can’t just <i>say</i> that <span
style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1135" type="#_x0000_t75" style='width:19pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image172.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=29 height=28
src="Forms_files/image161.png" v:shapes="_x0000_i1135"><![endif]></span>   is the formal set of composable pairs
of arrows.&nbsp;&nbsp; What you must do is produce a cone that forces it to be
that formal set, in other words forces it to be the set of composable arrows in
a model. &nbsp; And here it is:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_7" o:spid="_x0000_i1136" type="#_x0000_t75" alt="Description: CompositeCone"
 style='width:207.5pt;height:162.35pt;visibility:visible'>
 <v:imagedata src="Forms_files/image173.jpg" o:title="CompositeCone"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=317 height=248
src="Forms_files/image174.jpg" alt="Description: CompositeCone" v:shapes="Picture_x0020_7"><![endif]></p>

<p class=MsoNormal>(The blue arrows are the projections, the black objects and
arrows form the base diagram.&nbsp; Note that the middle blue arrow is
superfluous.&nbsp; If you drop it, you may recognize this as an ordinary <a
href="http://en.wikipedia.org/wiki/Pullback_diagram">pullback diagram</a>.)</p>

<p class=MsoNormal>You need an analogous cone for <span style='position:relative;
top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1137"
 type="#_x0000_t75" style='width:39.25pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image175.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=60 height=28
src="Forms_files/image176.png" v:shapes="_x0000_i1137"><![endif]></span> and diagrams for
associativity and to make the identity arrows behave right.&nbsp; The details
are in [<a href="#GBLS">GLBS</a>], chapter 7.</p>

<p class=MsoNormal>In a model <i >M</i>, the elements of <span style='position:
relative;top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1138"
 type="#_x0000_t75" style='width:39.25pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image177.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=60 height=28
src="Forms_files/image178.png" v:shapes="_x0000_i1138"><![endif]></span> are diagrams that look
like this:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="_x0000_i1139" type="#_x0000_t75" alt="Description: CompositeChain2"
 style='width:154.45pt;height:36.65pt;visibility:visible'>
 <v:imagedata src="Forms_files/image179.jpg" o:title="CompositeChain2"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=236 height=56
src="Forms_files/image180.jpg" alt="Description: CompositeChain2" v:shapes="_x0000_i1139"><![endif]></p>

<p class=MsoNormal>This green diagram is <i>in the model (semantics), </i>and
the cone above is a diagram <i>in the syntax.</i> You have to make the distinction
constantly in this subject. This is remarkably annoying. To help, I am
systematically putting objects of the category-that-is-the-model in <span
style='color:green'>green</span>, and cone projections in <span
style='color:blue'>blue</span>.&nbsp; <b><i>Black and blue means syntax,&nbsp;
green means semantics.</i></b></p>

<h2>Remarks</h2>

<p class=MsoNormal><span style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1140" type="#_x0000_t75"
 style='width:39.25pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image181.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=60 height=28
src="Forms_files/image178.png" v:shapes="_x0000_i1140"><![endif]></span> is the domain of the composition arrow <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1141" type="#_x0000_t75" style='width:54.35pt;height:15.7pt'
 o:ole="">
 <v:imagedata src="Forms_files/image182.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=83 height=24
src="Forms_files/image183.png" v:shapes="_x0000_i1141"><![endif]></span>.&nbsp; So defining categories requires more subtlety that
defining an ordinary algebra, where the domains of the ops are always cartesian
products:&nbsp; this domain is an <i >equalizer</i>.&nbsp;
<b><i>To sketch categories requires the full power of finite limits, not just
finite products.</i></b><i> </i>Of course, that last sentence does not follow
from anything I have said, since there might be a rascally way to use only
finite products.&nbsp; But there isn’t: the category of small categories is not
regular (Exercise 6, page 278, of [<a href="#TTT">TTT</a>])&nbsp; but any
category of multisorted universal algebras (which are the same thing as models
of FP theories) does have that property: see [<a href="#TTT">TTT</a>], section
8.4.</p>

<p class=MsoNormal>Nevertheless, the category of models of an FL sketch always
has all sortwise limits and all sortwise filtered colimits. in particular
initial algebras.&nbsp;</p>

<p class=MsoNormal>Constructing a particular kind of limit or colimit<b
>&nbsp;sortwise</b> means that it is
constructed sort by sort.&nbsp; For example, if always <span style='position:
relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1142"
 type="#_x0000_t75" style='width:128.3pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image184.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=196 height=24
src="Forms_files/image185.png" v:shapes="_x0000_i1142"><![endif]></span>, then the category of models has sortwise products.&nbsp; In
most of the references the name “pointwise” is used.</p>

<h2>Categories with structure</h2>

<p class=MsoNormal>Many categories with particular properties can also be
sketched with FL sketches.&nbsp; These include</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal >Categories
     with finite limits</li>
 <li class=MsoNormal >Cartesian
     closed categories</li>
 <li class=MsoNormal >Toposes</li>
 <li class=MsoNormal >Symmetric
     monoidal categories</li>
 <li class=MsoNormal >Abelian
     categories</li>
</ul>

<h1><a name="_Sketch_for_categories"></a>Sketch for categories with finite
products</h1>

<p class=MsoNormal>A category has finite <a
href="http://en.wikipedia.org/wiki/Product_%28category_theory%29">products</a>
(is an <b>FP category</b>) if it has terminal objects and binary
products.&nbsp; <a
href="http://arxiv.org/PS_cache/arxiv/pdf/0809/0809.3023v1.pdf%22%3EGraph-Based%20Logic%20and%20Sketches%3C/a%3E">GBLS</a>
describes the construction of the FL sketch for categories with finite products
in section 7.3, which spells out how you sketch the set of terminal objects and
the set of binary product cones.&nbsp; I will give a more detailed discussion
of how to do binary product cones here and introduce the annotation notation we
use.</p>

<h2>Syntax and semantics</h2>

<p class=MsoNormal>We must distinguish between two things: </p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal >The <b>FL sketch for FP
     categories</b></li>
 <li class=MsoNormal >The <i >models</i> of the FL sketch for FP categories, which <i>are</i> <b>FP
     categories</b>.&nbsp; </li>
</ul>

<p class=MsoNormal><b >A <i>diagram in the
FL sketch</i> will be in black (the color for <i>syntax)</i> and a <i>diagram
in a category with finite products</i> will be <span style='color:#00B050'>green</span>
(the color for <i>semantics)</i>.&nbsp; In both syntax and semantics,
projection arrows may be <span style='color:#0070C0'>blue</span> and arrows
that exist uniquely (fill-in arrows) may be <span style='color:red'>red</span>.</b></p>

<h2>Product diagrams</h2>

<p class=MsoNormal>A product diagram in an FP category looks like this:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_23" o:spid="_x0000_i1143" type="#_x0000_t75" alt="Description: ProductCone"
 style='width:133.55pt;height:83.15pt;visibility:visible'>
 <v:imagedata src="Forms_files/image186.jpg" o:title="ProductCone"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=204 height=127
src="Forms_files/image187.jpg" alt="Description: ProductCone" v:shapes="Picture_x0020_23"><![endif]>(Diagram
<span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1144" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image188.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image189.png" v:shapes="_x0000_i1144"><![endif]></span>)</p>

<p class=MsoNormal>But a diagram can look like that <i>without being a product
diagram. </i>You have to <i>say </i>that it is a product diagram.&nbsp;  This means that for <i >any</i> cone to the same pair of objects</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="_x0000_i1145" type="#_x0000_t75" alt="Description: AnyCone" style='width:137.45pt;
 height:83.8pt;visibility:visible'>
 <v:imagedata src="Forms_files/image190.jpg" o:title="AnyCone"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=210 height=128
src="Forms_files/image191.jpg" alt="Description: AnyCone" v:shapes="_x0000_i1145"><![endif]>(Diagram
<span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1146" type="#_x0000_t75" style='width:11.15pt;height:13.1pt'
 o:ole="">
 <v:imagedata src="Forms_files/image192.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=20
src="Forms_files/image193.png" v:shapes="_x0000_i1146"><![endif]></span>)</p>

<p class=MsoNormal>there is a unique arrow <i>h</i> making this diagram
commute:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_19" o:spid="_x0000_i1147" type="#_x0000_t75" alt="Description: FiaDiagram"
 style='width:137.45pt;height:126.35pt;visibility:visible'>
 <v:imagedata src="Forms_files/image194.jpg" o:title="FiaDiagram"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=210 height=193
src="Forms_files/image195.jpg" alt="Description: FiaDiagram" v:shapes="Picture_x0020_19"><![endif]>(Diagram
<b>F</b>)</p>

<h2><a name="_FL_sketch_for"></a>FL sketch for FP categories</h2>

<p class=MsoNormal>To get the FL sketch for FP categories, you start with the
sketch for categories and add some objects and arrows.&nbsp; The ones listed
below are the objects and arrows needed for sketching the set of binary cones
and finite-product cones.&nbsp; Others are needed for the terminal object (much
easier and not done here).</p>

<h3>Objects</h3>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1148" type="#_x0000_t75"
 style='width:30.1pt;height:11.8pt' o:ole="">
 <v:imagedata src="Forms_files/image196.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=46 height=18
src="Forms_files/image197.png" v:shapes="_x0000_i1148"><![endif]></span>, the formal set of cones of the form <span style='position:
relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1149"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image198.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image189.png" v:shapes="_x0000_i1149"><![endif]></span>.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1150" type="#_x0000_t75"
 style='width:15.7pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image199.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=24 height=21
src="Forms_files/image200.png" v:shapes="_x0000_i1150"><![endif]></span>, the formal set of fill-in diagrams (diagrams of the form of
<b >F</b> above).</p>

<h3>Arrows</h3>

<p class=MsoNormal><span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1151" type="#_x0000_t75"
 style='width:115.2pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image201.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=176 height=24
src="Forms_files/image202.png" v:shapes="_x0000_i1151"><![endif]></span>, that picks out the product cone over a pair of objects.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1152" type="#_x0000_t75"
 style='width:92.95pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image203.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=142 height=21
src="Forms_files/image204.png" v:shapes="_x0000_i1152"><![endif]></span>, that picks out the source cone of a fill-in arrow.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1153" type="#_x0000_t75"
 style='width:90.35pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image205.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=138 height=21
src="Forms_files/image206.png" v:shapes="_x0000_i1153"><![endif]></span>, that picks out the target cone of a fill-in arrow.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1154" type="#_x0000_t75"
 style='width:85.75pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image207.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=131 height=21
src="Forms_files/image208.png" v:shapes="_x0000_i1154"><![endif]></span>, that takes a cone to the unique fill-in diagram that has
the cone as source cone.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1155" type="#_x0000_t75"
 style='width:64.8pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image209.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=99 height=21
src="Forms_files/image210.png" v:shapes="_x0000_i1155"><![endif]></span> that formally picks
out the fill-in arrow in a fill-in diagram.</p>

<h2>Specification for the formal set of cones</h2>

<p class=MsoNormal>The FL sketch for FP categories contains this limit cone,
which requires that the two arrows in a cone have the same source. Note that I
have named the projections lproj and rproj.</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="_x0000_i1156" type="#_x0000_t75" alt="Description: ConeDef" style='width:252.65pt;
 height:128.3pt;visibility:visible'>
 <v:imagedata src="Forms_files/image211.jpg" o:title="ConeDef"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=386 height=196
src="Forms_files/image212.jpg" alt="Description: ConeDef" v:shapes="_x0000_i1156"><![endif]>(Diagram
<b>ConeSpec</b>)</p>

<h2>Annotations</h2>

<p class=MsoNormal>This cone is <b >annotated</b><i> </i>according to a
system that is spelled out precisely in [<a href="#GBLS">GBLS</a>].&nbsp; The
annotation of this diagram refers to cone <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1157"
 type="#_x0000_t75" style='width:11.15pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image213.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=20
src="Forms_files/image193.png" v:shapes="_x0000_i1157"><![endif]></span> above.&nbsp; Some perspectives on this
situation:</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal >The
     annotations allow you to chase the diagram.  For example, if <span style='position:
     relative;top:2.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1158" type="#_x0000_t75" style='width:11.15pt;height:13.1pt'
      o:ole="">
      <v:imagedata src="Forms_files/image214.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=17 height=20
     src="Forms_files/image193.png" v:shapes="_x0000_i1158"><![endif]></span> is a member of
     the set of cones of a model, then <span style='position:relative;
     top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1159"
      type="#_x0000_t75" style='width:64.8pt;height:18.35pt' o:ole="">
      <v:imagedata src="Forms_files/image215.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=99 height=28
     src="Forms_files/image216.png" v:shapes="_x0000_i1159"><![endif]></span> and <span
     style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1160" type="#_x0000_t75" style='width:81.8pt;height:18.35pt'
      o:ole="">
      <v:imagedata src="Forms_files/image217.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=125 height=28
     src="Forms_files/image218.png" v:shapes="_x0000_i1160"><![endif]></span>.  In the
     preceding sentence, I use <a
     href="/Word%20Press/?p=3364">abuse of notation</a>:  The sentence should say that <span
     style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1161" type="#_x0000_t75" style='width:83.15pt;height:18.35pt'
      o:ole="">
      <v:imagedata src="Forms_files/image219.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=127 height=28
     src="Forms_files/image220.png" v:shapes="_x0000_i1161"><![endif]></span> and that <span
     style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1162" type="#_x0000_t75" style='width:98.85pt;height:18.35pt'
      o:ole="">
      <v:imagedata src="Forms_files/image221.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=151 height=28
     src="Forms_files/image222.png" v:shapes="_x0000_i1162"><![endif]></span>.</li>
 <li class=MsoNormal ><span
     style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1163" type="#_x0000_t75" style='width:11.15pt;height:11.8pt'
      o:ole="">
      <v:imagedata src="Forms_files/image223.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=17 height=18
     src="Forms_files/image224.png" v:shapes="_x0000_i1163"><![endif]></span> is being used as
     the shape graph (see [<a href="#GBLS">GBLS</a>], 2.3) for <b>ConeSpec. </b></li>
 <li class=MsoNormal >The
     annotation is a section<b > </b>of the
     model thought of as a <a
     href="http://en.wikipedia.org/wiki/Sheaf_%28mathematics%29">sheaf.</a></li>
</ol>

<h2>Specification for the formal set of fill-in diagrams</h2>

<p class=MsoNormal>This much more complicated annotated limit cone defines <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1164" type="#_x0000_t75" style='width:15.7pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image225.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=24 height=21
src="Forms_files/image200.png" v:shapes="_x0000_i1164"><![endif]></span>:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="_x0000_i1165" type="#_x0000_t75" alt="Description: fidcone" style='width:469.95pt;
 height:501.4pt;visibility:visible'>
 <v:imagedata src="Forms_files/image226.jpg" o:title="fidcone"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=718 height=766
src="Forms_files/image227.jpg" alt="Description: fidcone" v:shapes="_x0000_i1165"><![endif]></p>

<p class=MsoNormal>I completed the annotation compared to the version in GBLS,
whose partial annotation generates the rest.&nbsp; The three projection arrows
shown generate all the others, not shown to avoid clutter.</p>

<p class=MsoNormal>Some notes and examples:</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal >It is
     worthwhile checking through the conditions to see that this limit cone
     really does specify <b>fid</b>.&nbsp; If you do, you will see the sketch
     needs a couple of commutative diagrams, found in GBLS, 7.3.2.</li>
 <li class=MsoNormal >The
     whole diagram is commutative because of the diagrams just mentioned and
     the commutative diagrams of the FL sketch for categories mentioned above
     (and described completely in GBLS 7.2).</li>
 <li class=MsoNormal >This
     diagram is symmetrical in spirit, with <i>one exception: </i>The arrow <b>prod
     </b>breaks the symmetry because there is no corresponding arrow going
     upward.&nbsp; This reflects the fact that a fill-in diagram is not
     symmetrical: The right hand cone is a limit cone but the left hand cone is
     not.</li>
 <li class=MsoNormal >I
     suspect that the diagram could be drawn in a way that is <i>really</i>
     symmetrical (geometrically) in three dimensions (or four?), except for the
     break mentioned in (3).</li>
</ol>

<h1>Cartesian closed categories</h1>

<p class=MsoNormal>A <b>Cartesian closed category</b> is a category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1166" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image228.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
src="Forms_files/image041.png" v:shapes="_x0000_i1166"><![endif]></span>with the following structure:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal ><b
     ><span style='position:relative;
     top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1167"
      type="#_x0000_t75" style='width:11.15pt;height:13.75pt' o:ole="">
      <v:imagedata src="Forms_files/image229.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
     src="Forms_files/image041.png" v:shapes="_x0000_i1167"><![endif]></span></b>has binary products.</li>
 <li class=MsoNormal >For
     each pair of objects <i >A </i>and <i >B of</i> <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1168" type="#_x0000_t75"
      style='width:11.15pt;height:13.75pt' o:ole="">
      <v:imagedata src="Forms_files/image230.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
     src="Forms_files/image041.png" v:shapes="_x0000_i1168"><![endif]></span>, there is an object <span style='position:relative;
     top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1169"
      type="#_x0000_t75" style='width:18.35pt;height:15.7pt' o:ole="">
      <v:imagedata src="Forms_files/image231.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=28 height=24
     src="Forms_files/image232.png" v:shapes="_x0000_i1169"><![endif]></span>and an arrow <span style='position:relative;top:3.0pt;
     '><!--[if gte vml 1]><v:shape id="_x0000_i1170"
      type="#_x0000_t75" style='width:94.25pt;height:17pt' o:ole="">
      <v:imagedata src="Forms_files/image233.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=144 height=26
     src="Forms_files/image234.png" v:shapes="_x0000_i1170"><![endif]></span>.&nbsp; <span style='position:relative;top:2.0pt;
     '><!--[if gte vml 1]><v:shape id="_x0000_i1171"
      type="#_x0000_t75" style='width:18.35pt;height:15.7pt' o:ole="">
      <v:imagedata src="Forms_files/image235.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=28 height=24
     src="Forms_files/image232.png" v:shapes="_x0000_i1171"><![endif]></span> is an <b>exponential
     object</b>.</li>
 <li class=MsoNormal >For
     each triple of objects <i >A, B</i>
     and <i >C</i> of <span
     style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1172" type="#_x0000_t75" style='width:11.15pt;height:13.75pt'
      o:ole="">
      <v:imagedata src="Forms_files/image236.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=17 height=21
     src="Forms_files/image041.png" v:shapes="_x0000_i1172"><![endif]></span>, there is a map <span style='position:relative;
     top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1173"
      type="#_x0000_t75" style='width:168.2pt;height:19pt' o:ole="">
      <v:imagedata src="Forms_files/image237.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=257 height=29
     src="Forms_files/image238.png" v:shapes="_x0000_i1173"><![endif]></span>such that for every arrow <span style='position:relative;
     top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1174"
      type="#_x0000_t75" style='width:70.05pt;height:13.75pt' o:ole="">
      <v:imagedata src="Forms_files/image239.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=107 height=21
     src="Forms_files/image240.png" v:shapes="_x0000_i1174"><![endif]></span>, the diagram below commutes:</li>
</ul>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_75" o:spid="_x0000_i1175" type="#_x0000_t75" alt="Description: CCCDiagrams1"
 style='width:162.35pt;height:100.8pt;visibility:visible'>
 <v:imagedata src="Forms_files/image241.jpg" o:title="CCCDiagrams1"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=248 height=154
src="Forms_files/image242.jpg" alt="Description: CCCDiagrams1" v:shapes="Picture_x0020_75"><![endif]>(lameval)</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal >For
     any arrow <span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
      id="_x0000_i1176" type="#_x0000_t75" style='width:58.9pt;height:19pt'
      o:ole="">
      <v:imagedata src="Forms_files/image243.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=90 height=29
     src="Forms_files/image244.png" v:shapes="_x0000_i1176"><![endif]></span>, <span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1177" type="#_x0000_t75"
      style='width:123.05pt;height:15.7pt' o:ole="">
      <v:imagedata src="Forms_files/image245.wmz" o:title=""/>
     </v:shape><![endif]--><![if !vml]><img border=0 width=188 height=24
     src="Forms_files/image246.png" v:shapes="_x0000_i1177"><![endif]></span>.</li>
</ul>

<p class=MsoNormal>It follows that <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1178" type="#_x0000_t75"
 style='width:9.8pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image247.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=15 height=21
src="Forms_files/image248.png" v:shapes="_x0000_i1178"><![endif]></span> is a natural isomorphism of homsets.</p>

<h2>Currying</h2>

<p class=MsoNormal>Going from <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1179" type="#_x0000_t75"
 style='width:70.05pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image249.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=21
src="Forms_files/image240.png" v:shapes="_x0000_i1179"><![endif]></span> to <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1180" type="#_x0000_t75" style='width:15.05pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image250.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=23 height=21
src="Forms_files/image251.png" v:shapes="_x0000_i1180"><![endif]></span> is called <b>currying </b>or
<b>partial application. </b>You can curry a multivariable function all the way
down to a constant.&nbsp; The inverse process is usually called <b>uncurrying</b>.
&nbsp; It constitutes getting rid of entries in the codomain of a function that
are function spaces by <i>adding variables</i> to the function. I suggest using<b>
blanding</b> instead of “uncurrying”.</p>

<h1>The FL sketch for cartesian closed categories</h1>

<p class=MsoNormal>The FL sketch for CCC’s (which I will call <b>CCCSk</b>) is
spelled out in detail in [<a
href="http://arxiv.org/PS_cache/arxiv/pdf/0809/0809.3023v1.pdf"><span
style='color:#0062A0'>GBLS</span></a>]. I will mention some of the
constructions here.&nbsp; I will use many of them in the next section to give
an example of a form.</p>

<h2>Objects and arrows</h2>

<p class=MsoNormal>The complete list is spelled out in Sections 7.2 and&nbsp;
7.6 of [<a href="http://arxiv.org/PS_cache/arxiv/pdf/0809/0809.3023v1.pdf">GBLS</a>].&nbsp;
Here I mention</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1181" type="#_x0000_t75"
 style='width:73.3pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image252.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=112 height=21
src="Forms_files/image253.png" v:shapes="_x0000_i1181"><![endif]></span> that formally picks
out the identity arrow of an object.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1182" type="#_x0000_t75"
 style='width:32.75pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image254.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=50 height=21
src="Forms_files/image255.png" v:shapes="_x0000_i1182"><![endif]></span>, the formal set of functions of two variables, in other
words arrows of the form <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1183" type="#_x0000_t75"
 style='width:70.05pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image256.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=21
src="Forms_files/image240.png" v:shapes="_x0000_i1183"><![endif]></span>.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1184" type="#_x0000_t75"
 style='width:104.05pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image257.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=159 height=26
src="Forms_files/image258.png" v:shapes="_x0000_i1184"><![endif]></span> that picks out the
arrow <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1185" type="#_x0000_t75" style='width:9.15pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image259.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=14 height=20
src="Forms_files/image260.png" v:shapes="_x0000_i1185"><![endif]></span> itself.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1186" type="#_x0000_t75"
 style='width:111.25pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image261.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=170 height=21
src="Forms_files/image262.png" v:shapes="_x0000_i1186"><![endif]></span> that picks out the
source <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1187" type="#_x0000_t75" style='width:30.75pt;height:13.1pt'
 o:ole="">
 <v:imagedata src="Forms_files/image263.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=47 height=20
src="Forms_files/image264.png" v:shapes="_x0000_i1187"><![endif]></span> of a two-variable
function <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1188" type="#_x0000_t75" style='width:70.05pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image265.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=107 height=21
src="Forms_files/image240.png" v:shapes="_x0000_i1188"><![endif]></span>.</p>

<p class=MsoNormal><span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1189" type="#_x0000_t75"
 style='width:30.1pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image266.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=46 height=21
src="Forms_files/image267.png" v:shapes="_x0000_i1189"><![endif]></span>, the formal set of curried functions from <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1190" type="#_x0000_t75" style='width:43.85pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image268.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=67 height=26
src="Forms_files/image269.png" v:shapes="_x0000_i1190"><![endif]></span>.</p>

<p class=MsoNormal><span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1191" type="#_x0000_t75"
 style='width:117.15pt;height:19pt' o:ole="">
 <v:imagedata src="Forms_files/image270.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=179 height=29
src="Forms_files/image271.png" v:shapes="_x0000_i1191"><![endif]></span> and <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1192" type="#_x0000_t75" style='width:117.8pt;height:22.25pt'
 o:ole="">
 <v:imagedata src="Forms_files/image272.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=180 height=34
src="Forms_files/image273.png" v:shapes="_x0000_i1192"><![endif]></span> that pick out the
source and target of a curried function <span style='position:relative;
top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1193"
 type="#_x0000_t75" style='width:58.9pt;height:19pt' o:ole="">
 <v:imagedata src="Forms_files/image274.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=90 height=29
src="Forms_files/image244.png" v:shapes="_x0000_i1193"><![endif]></span>.</p>

<p class=MsoNormal><span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1194" type="#_x0000_t75"
 style='width:115.2pt;height:20.3pt' o:ole="">
 <v:imagedata src="Forms_files/image275.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=176 height=31
src="Forms_files/image276.png" v:shapes="_x0000_i1194"><![endif]></span> that picks out the
function space <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1195" type="#_x0000_t75" style='width:18.35pt;height:15.7pt'
 o:ole="">
 <v:imagedata src="Forms_files/image277.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=24
src="Forms_files/image232.png" v:shapes="_x0000_i1195"><![endif]></span> of two objects <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1196" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image278.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image279.png" v:shapes="_x0000_i1196"><![endif]></span> and <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1197" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image280.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1197"><![endif]></span>.  </p>

<p class=MsoNormal><span style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1198" type="#_x0000_t75"
 style='width:18.35pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image282.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=28
src="Forms_files/image283.png" v:shapes="_x0000_i1198"><![endif]></span>, the formal set of composable pairs of arrows in the FL
sketch for categories, defined by this pullback diagram:<span style='position:
relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1199"
 type="#_x0000_t75" style='width:1027.65pt;height:7.85pt' o:ole="">
 <v:imagedata src="Forms_files/image284.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=1570 height=12
src="Forms_files/image285.png" v:shapes="_x0000_i1199"><![endif]></span> </p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_51" o:spid="_x0000_i1200" type="#_x0000_t75" alt="Description: CatAr2Def"
 style='width:200.3pt;height:191.8pt;visibility:visible'>
 <v:imagedata src="Forms_files/image286.jpg" o:title="CatAr2Def"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=306 height=293
src="Forms_files/image287.jpg" alt="Description: CatAr2Def" v:shapes="Picture_x0020_51"><![endif]>(Ar2Def)</p>

<p class=MsoNormal>For the purposes of the example below, I need&nbsp;<span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1201" type="#_x0000_t75" style='width:151.85pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image288.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=232 height=26
src="Forms_files/image289.png" v:shapes="_x0000_i1201"><![endif]></span> as defined by this
diagram:<!--[if gte vml 1]><v:shape id="Picture_x0020_49"
 o:spid="_x0000_i1202" type="#_x0000_t75" alt="Description: CCCTSourceDef"
 style='width:245.45pt;height:113.9pt;visibility:visible'>
 <v:imagedata src="Forms_files/image290.jpg" o:title="CCCTSourceDef"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=375 height=174
src="Forms_files/image291.jpg" alt="Description: CCCTSourceDef" v:shapes="Picture_x0020_49"><![endif]>(Bsource)</p>

<p class=MsoNormal>In an object-oriented program built on this work, this would
be a <i>derived method.</i>.</p>

<p class=MsoNormal>One of the limit cones in CCCSk defines <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1203" type="#_x0000_t75" style='width:30.1pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image292.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=46 height=21
src="Forms_files/image267.png" v:shapes="_x0000_i1203"><![endif]></span> and in particular
gives <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1204" type="#_x0000_t75" style='width:13.1pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image293.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=21
src="Forms_files/image294.png" v:shapes="_x0000_i1204"><![endif]></span> the properties it needs:</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_46" o:spid="_x0000_i1205" type="#_x0000_t75" alt="Description: CCCurryDiagram"
 style='width:347.55pt;height:170.85pt;visibility:visible'>
 <v:imagedata src="Forms_files/image295.jpg" o:title="CCCurryDiagram"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=531 height=261
src="Forms_files/image296.jpg" alt="Description: CCCurryDiagram" v:shapes="Picture_x0020_46"><![endif]>(Curry)</p>

<p class=MsoNormal>The formally commutative diagram below should have been
included in the FL sketch for categories in Section 7.2 of [<a href="#GBLS">GLBS</a>].&nbsp;&nbsp;
It gives the composite of a composable pair the right source and target.</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_45" o:spid="_x0000_i1206" type="#_x0000_t75" alt="Description: CatCompCompat"
 style='width:171.5pt;height:195.05pt;visibility:visible'>
 <v:imagedata src="Forms_files/image297.jpg" o:title="CatCompCompat"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=262 height=298
src="Forms_files/image298.jpg" alt="Description: CatCompCompat" v:shapes="Picture_x0020_45"><![endif]>(Compreq)</p>

<h1>Representing reflexive function spaces</h1>

<p class=MsoNormal>An object <span style='position:relative;top:2.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1207" type="#_x0000_t75"
 style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image299.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1207"><![endif]></span> of a cartesian closed category is <b>reflexive
</b>if there are arrows <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1208" type="#_x0000_t75"
 style='width:56.95pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image300.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=87 height=24
src="Forms_files/image301.png" v:shapes="_x0000_i1208"><![endif]></span> and <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1209" type="#_x0000_t75" style='width:58.9pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image302.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=90 height=26
src="Forms_files/image303.png" v:shapes="_x0000_i1209"><![endif]></span> such that</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_41" o:spid="_x0000_i1210" type="#_x0000_t75" alt="Description: ReflexiveFSRetractDiagram"
 style='width:115.2pt;height:108.65pt;visibility:visible'>
 <v:imagedata src="Forms_files/image304.jpg" o:title="ReflexiveFSRetractDiagram"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=176 height=166
src="Forms_files/image305.jpg" alt="Description: ReflexiveFSRetractDiagram"
v:shapes="Picture_x0020_41"><![endif]>(ret)</p>

<p class=MsoNormal>commutes.&nbsp; That means&nbsp; <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1211"
 type="#_x0000_t75" style='width:18.35pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image306.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=24
src="Forms_files/image307.png" v:shapes="_x0000_i1211"><![endif]></span> is a <b>retract </b>of
<span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1212" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image308.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1212"><![endif]></span>.&nbsp;  <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1213" type="#_x0000_t75" style='width:18.35pt;height:15.7pt'
 o:ole="">
 <v:imagedata src="Forms_files/image309.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=24
src="Forms_files/image307.png" v:shapes="_x0000_i1213"><![endif]></span> is called&nbsp; a <b>reflexive
function space.  </b>Reflexive function
spaces are the theoretical basis for programming languages which have <a
href="http://en.wikipedia.org/wiki/First-class_function">functions as first
class objects</a>.</p>

<p class=MsoNormal>So a sketch for RFS’s would be defined by a limit cone
over&nbsp; the diagram below.&nbsp; I have always shown the cones in blue
before, but GBLS does not show cones at all, and it isn’t necessary to show
them.</p>

<p class=MsoNormal><!--[if gte vml 1]><v:shape
 id="Picture_x0020_37" o:spid="_x0000_i1214" type="#_x0000_t75" alt="Description: ReflexiveConeBase"
 style='width:361.95pt;height:251.35pt;visibility:visible'>
 <v:imagedata src="Forms_files/image310.jpg" o:title="ReflexiveConeBase"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=553 height=384
src="Forms_files/image311.jpg" alt="Description: ReflexiveConeBase" v:shapes="Picture_x0020_37"><![endif]>(ReflFSConeBase)</p>

<p class=MsoNormal>To specify a reflexive function space you would have to
give  an object <span style='position:
relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1215"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image312.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1215"><![endif]></span> and two arrows <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1216" type="#_x0000_t75" style='width:121.1pt;height:19pt' o:ole="">
 <v:imagedata src="Forms_files/image313.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=185 height=29
src="Forms_files/image314.png" v:shapes="_x0000_i1216"><![endif]></span> that satisfies Diagram
(lameval) above, so the mandatory projections would be to <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1217" type="#_x0000_t75" style='width:22.9pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image315.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=35 height=26
src="Forms_files/image316.png" v:shapes="_x0000_i1217"><![endif]></span>, <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1218" type="#_x0000_t75"
 style='width:18.35pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image317.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=26
src="Forms_files/image318.png" v:shapes="_x0000_i1218"><![endif]></span> and <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1219" type="#_x0000_t75" style='width:20.3pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image319.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=31 height=26
src="Forms_files/image320.png" v:shapes="_x0000_i1219"><![endif]></span>.  The projection to <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1220" type="#_x0000_t75" style='width:28.8pt;height:20.3pt' o:ole="">
 <v:imagedata src="Forms_files/image321.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=44 height=31
src="Forms_files/image322.png" v:shapes="_x0000_i1220"><![endif]></span> is induced by Diagram
(Curry) above, the projection to <span style='position:relative;top:2.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1221" type="#_x0000_t75"
 style='width:41.9pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image323.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=64 height=24
src="Forms_files/image324.png" v:shapes="_x0000_i1221"><![endif]></span>  by Diagram (Ar2Def),
and the projection to <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1222" type="#_x0000_t75"
 style='width:55pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image325.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=84 height=26
src="Forms_files/image326.png" v:shapes="_x0000_i1222"><![endif]></span> follows from the fact
that it is the vertex of the product cone shown.  The other projections exist by composition.</p>

<p class=MsoNormal>Let's call the vertex of this cone <b >rfs</b> for &quot;reflexive function space&quot;.  Note that a<i >ll the objects and arrows in this diagram exist in the FL sketch for
cartesian closed categories.</i></p>

<p class=MsoNormal>Now you can check (or forget all the constructions above and
just&nbsp;Put Your Hands On The Monitor And Believe) that in a model <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1223" type="#_x0000_t75" style='width:13.75pt;height:13.1pt'
 o:ole="">
 <v:imagedata src="Forms_files/image327.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=21 height=20
src="Forms_files/image132.png" v:shapes="_x0000_i1223"><![endif]></span> of the FL sketch for CCC’s, <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1224" type="#_x0000_t75" style='width:34.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image328.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=53 height=24
src="Forms_files/image329.png" v:shapes="_x0000_i1224"><![endif]></span> would be the set of reflexive function spaces
together with specified inclusion <span style='position:relative;top:2.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1225" type="#_x0000_t75"
 style='width:56.95pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image330.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=87 height=24
src="Forms_files/image301.png" v:shapes="_x0000_i1225"><![endif]></span> and retraction <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1226" type="#_x0000_t75" style='width:58.9pt;height:17pt' o:ole="">
 <v:imagedata src="Forms_files/image331.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=90 height=26
src="Forms_files/image303.png" v:shapes="_x0000_i1226"><![endif]></span>.</p>

<p class=MsoNormal><b>Non-surprise: </b>In any model of the FL sketch for CCC’s
in the category of sets, <span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1227" type="#_x0000_t75"
 style='width:34.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image332.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=53 height=24
src="Forms_files/image329.png" v:shapes="_x0000_i1227"><![endif]></span>will be the <i>empty set. </i>It is well known that for any
set <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1228" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image333.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1228"><![endif]></span>&nbsp; the function space <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1229"
 type="#_x0000_t75" style='width:18.35pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image334.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=24
src="Forms_files/image307.png" v:shapes="_x0000_i1229"><![endif]></span> has cardinality properly bigger that
the cardinality of <span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1230" type="#_x0000_t75"
 style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image335.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1230"><![endif]></span>, so there can be no inclusion of <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1231"
 type="#_x0000_t75" style='width:18.35pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image336.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=28 height=24
src="Forms_files/image307.png" v:shapes="_x0000_i1231"><![endif]></span> into <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1232" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image337.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1232"><![endif]></span>.</p>

<p class=MsoNormal>Nevertheless, <span style='position:relative;top:5.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1233" type="#_x0000_t75"
 style='width:34.7pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image338.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=53 height=24
src="Forms_files/image329.png" v:shapes="_x0000_i1233"><![endif]></span> is a <i>perfectly well
defined set</i>.&nbsp; It just turns out to be empty.</p>

<h1>Forms</h1>

<p class=MsoNormal>Forms are defined formally in [<a
href="http://arxiv.org/PS_cache/arxiv/pdf/0809/0809.3023v1.pdf">GBLS</a>].&nbsp;
Here I will provide a form for reflexive function spaces as an example. In such
a way that you get an informal definition of form. </p>

<p class=MsoNormal>Some terminology:</p>

<h2>Constructor space</h2>

<p class=MsoNormal>The sketch CCCSk for cartesian closed categories is a <b>constructor
space. </b>A constructor space must be an FL-sketch that “contains” and is
“generated” (see [<a
href="http://arxiv.org/PS_cache/arxiv/pdf/0809/0809.3023v1.pdf">GBLS</a>],
Chapter 6.1) by the FL sketch for categories, and indeed CCCSk is built from
the FL sketch for categories by adjoining some objects and arrows, cones and
commutative diagrams <i>that all exist already in the <a href="#_The_sketch_for">FL
Cattheory for categories</a></i>.&nbsp; So a constructor space <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1234" type="#_x0000_t75" style='width:11.8pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image339.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image340.png" v:shapes="_x0000_i1234"><![endif]></span> has models we can call&nbsp; <b>C-categories.
</b>In particular <i >a model for </i>CCCSk<i
> in sets is a cartesian closed category</i>.&nbsp;
</p>

<p class=MsoNormal>We can identify the constructor space <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1235" type="#_x0000_t75" style='width:11.8pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image341.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image340.png" v:shapes="_x0000_i1235"><![endif]></span> as a <b
>doctrine</b>.  For example, the doctrine of equational
theories (FP sketches) is the constructor space for <a
href="#_Sketch_for_categories">categories with finite products</a>, and the
doctrine of cartesian closed categories is CCCSk.  (I believe, <i >without having thought about it enough</i>, that this definition of
doctrine is spiritually the same as <a
href="http://en.wikipedia.org/wiki/2-category#Doctrines">Beck's definition of
doctrine</a>.)</p>

<h2>Form</h2>

<p class=MsoNormal>For any constructor space <span style='position:relative;
top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1236"
 type="#_x0000_t75" style='width:11.8pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image342.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image340.png" v:shapes="_x0000_i1236"><![endif]></span>, take an object <span style='position:relative;top:2.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1237" type="#_x0000_t75"
 style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image343.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image344.png" v:shapes="_x0000_i1237"><![endif]></span> in the FL Cattheory of <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1238" type="#_x0000_t75" style='width:11.8pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image345.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image340.png" v:shapes="_x0000_i1238"><![endif]></span>&nbsp;&nbsp; and adjoin a new arrow <span style='position:
relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1239"
 type="#_x0000_t75" style='width:45.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image346.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=70 height=20
src="Forms_files/image347.png" v:shapes="_x0000_i1239"><![endif]></span> where 1 is the terminal object.&nbsp; <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1240" type="#_x0000_t75" style='width:9.15pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image348.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=14 height=20
src="Forms_files/image260.png" v:shapes="_x0000_i1240"><![endif]></span>&nbsp; is what we call a <b>C-form</b> and<b> <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1241" type="#_x0000_t75" style='width:11.8pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image349.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image340.png" v:shapes="_x0000_i1241"><![endif]></span></b> with  <span style='position:relative;top:2.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1242" type="#_x0000_t75"
 style='width:9.15pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image350.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=14 height=20
src="Forms_files/image260.png" v:shapes="_x0000_i1242"><![endif]></span> as a freely adjoined arrow is called <span
style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1243" type="#_x0000_t75" style='width:15.7pt;height:18.35pt'
 o:ole="">
 <v:imagedata src="Forms_files/image351.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=24 height=28
src="Forms_files/image352.png" v:shapes="_x0000_i1243"><![endif]></span> .</p>

<p class=MsoNormal>A &quot;<b>model </b>of a <span style='position:relative;
top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1244"
 type="#_x0000_t75" style='width:11.8pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image353.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image340.png" v:shapes="_x0000_i1244"><![endif]></span>-form in a C-category <span style='position:relative;
top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1245"
 type="#_x0000_t75" style='width:13.1pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image354.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=21
src="Forms_files/image355.png" v:shapes="_x0000_i1245"><![endif]></span>“&nbsp; means that <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1246" type="#_x0000_t75"
 style='width:13.1pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image356.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=21
src="Forms_files/image355.png" v:shapes="_x0000_i1246"><![endif]></span>contains a model of <span style='position:relative;
top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1247"
 type="#_x0000_t75" style='width:15.05pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image357.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=23 height=28
src="Forms_files/image358.png" v:shapes="_x0000_i1247"><![endif]></span>.&nbsp; This means that in&nbsp; <span style='position:relative;
top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1248"
 type="#_x0000_t75" style='width:13.1pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image359.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=20 height=21
src="Forms_files/image355.png" v:shapes="_x0000_i1248"><![endif]></span>, <span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1249" type="#_x0000_t75"
 style='width:30.75pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image360.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=47 height=24
src="Forms_files/image361.png" v:shapes="_x0000_i1249"><![endif]></span> is <i>nonempty.</i></p>

<p class=MsoNormal>The CCC-form for reflexive function spaces is then a <i
>global element of the node <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1250" type="#_x0000_t75" style='width:15.7pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image362.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=24 height=21
src="Forms_files/image363.png" v:shapes="_x0000_i1250"><![endif]></span> of CCCSk</i> as constructed above for
some CCC.&nbsp; There are no models in the category of sets, but there are many
toposes (and many other CCC’s) that do have models, as in <a
href="http://en.wikipedia.org/wiki/Denotational_semantics">domain theory</a>.</p>

<h1>More about a model of a form</h1>

<p class=MsoNormal>Sketches are forms, in this sense:  If you have a sketch <span style='position:
relative;top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1251"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image364.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image038.png" v:shapes="_x0000_i1251"><![endif]></span>  in some doctrine  (for example, a
finite-limit sketch), the sketch consists of a graph with some diagrams,
cones and cocones.&nbsp; There is a node <b >S</b> in the FL-Cattheory of finite-limit categories
each of whose elements in a model of <b >S </b>(in other words in an FL -category) will
be such a sketch.</p>

<h2>Example: The FP sketch for magmas</h2>

<p class=MsoNormal>A <a
href="http://en.wikipedia.org/wiki/Magma_%28algebra%29">magma</a> is a
set with a binary operation defined on it.&nbsp; It does not have to be
associative or commutative or anything.&nbsp; </p>

<p class=MsoNormal>In the FP doctrine, the sketch for magmas consists of objects
<span style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1252" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image365.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1252"><![endif]></span> and <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1253" type="#_x0000_t75" style='width:30.75pt;height:13.1pt'
 o:ole="">
 <v:imagedata src="Forms_files/image366.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=47 height=20
src="Forms_files/image367.png" v:shapes="_x0000_i1253"><![endif]></span>, arrows <span style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1254" type="#_x0000_t75"
 style='width:108pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image368.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=165 height=28
src="Forms_files/image369.png" v:shapes="_x0000_i1254"><![endif]></span></p>

<p class=MsoNormal>and one cone</p>

<p class=MsoNormal><a
href="/Word%20Press/wp-content/uploads/2009/11/magmaproddiag.jpg"><span
style='font-size:12.0pt;line-height:115%;font-family:"Times New Roman","serif";
text-decoration:
none'><!--[if gte vml 1]><v:shape id="Picture_x0020_25"
 o:spid="_x0000_i1255" type="#_x0000_t75" alt="Description: /Word%20Press/wp-content/uploads/2009/11/magmaproddiag.jpg"
 style='width:127pt;height:67.4pt;visibility:visible' o:button="t">
 <v:imagedata src="Forms_files/image370.jpg" o:title="magmaproddiag"/>
</v:shape><![endif]--><![if !vml]><img border=0 width=194 height=103
src="Forms_files/image371.jpg"
alt="Description: /Word%20Press/wp-content/uploads/2009/11/magmaproddiag.jpg"
v:shapes="Picture_x0020_25"><![endif]></span></a><span style='font-size:12.0pt;
line-height:115%;font-family:"Times New Roman","serif"'>(Cone1)</span></p>

<p class=MsoNormal>and nothing else.&nbsp; The FP-Cattheory for this sketch is
(equivalent to) the <a href="http://en.wikipedia.org/wiki/Lawvere_theory">Lawvere
theory</a> of magmas.</p>

<p class=MsoNormal>The<a href="#_FL_sketch_for"> FL-Cattheory FPSk for FP categories</a> contains a node
whose inhabitants in any model of FPSk  (in other words in any FP-category) <i>are
all such sketches</i> (objects, arrows and the cone).&nbsp;&nbsp;<i
> This means that the FP sketch for magmas
corresponds to an FP-form</i>.&nbsp; In this way you can see that all sketches
in Ehresmann’s sense are forms in my sense.</p>

<p class=MsoNormal>This node can be constructed as the limit <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1256" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image372.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image344.png" v:shapes="_x0000_i1256"><![endif]></span> of a cone over a diagram in FPSk.&nbsp; You have to make the diagram become
a <i>description </i>of the objects, arrows and cone above, using the arrows in
the constructor space FPSk. For example <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1257" type="#_x0000_t75" style='width:17pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image373.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=26 height=21
src="Forms_files/image374.png" v:shapes="_x0000_i1257"><![endif]></span>, <span style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1258" type="#_x0000_t75"
 style='width:15.05pt;height:11.8pt' o:ole="">
 <v:imagedata src="Forms_files/image375.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=23 height=18
src="Forms_files/image376.png" v:shapes="_x0000_i1258"><![endif]></span>, <span style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1259" type="#_x0000_t75"
 style='width:115.2pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image377.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=176 height=24
src="Forms_files/image202.png" v:shapes="_x0000_i1259"><![endif]></span> and others, and
including formally commutative diagrams that say for example that Cone1's
projections go to the same object (using <span style='position:relative;
top:5.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1260"
 type="#_x0000_t75" style='width:26.2pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image378.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=40 height=24
src="Forms_files/image379.png" v:shapes="_x0000_i1260"><![endif]></span> and <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1261" type="#_x0000_t75" style='width:26.85pt;height:15.7pt'
 o:ole="">
 <v:imagedata src="Forms_files/image380.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=41 height=24
src="Forms_files/image381.png" v:shapes="_x0000_i1261"><![endif]></span>}.&nbsp;&nbsp; Adjoining a global element to this limit node
will result in an FL-category <span style='position:relative;top:6.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1262" type="#_x0000_t75"
 style='width:37.3pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image382.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=57 height=28
src="Forms_files/image383.png" v:shapes="_x0000_i1262"><![endif]></span> which contains FPSk along with that
global element.</p>

<p class=MsoNormal>So a model of the<i> form </i>for magmas in an FP category <span
style='position:relative;top:3.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1263" type="#_x0000_t75" style='width:11.8pt;height:13.75pt'
 o:ole="">
 <v:imagedata src="Forms_files/image384.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image385.png" v:shapes="_x0000_i1263"><![endif]></span> is a model of <span
style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1264" type="#_x0000_t75" style='width:37.3pt;height:18.35pt'
 o:ole="">
 <v:imagedata src="Forms_files/image386.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=57 height=28
src="Forms_files/image383.png" v:shapes="_x0000_i1264"><![endif]></span> for which the model of the underlying
cattheory FPSk is <span style='position:
relative;top:3.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1265"
 type="#_x0000_t75" style='width:11.8pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image387.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image385.png" v:shapes="_x0000_i1265"><![endif]></span>; in other words it is the category  <span style='position:relative;top:3.0pt;
'><!--[if gte vml 1]><v:shape id="_x0000_i1266" type="#_x0000_t75"
 style='width:11.8pt;height:13.75pt' o:ole="">
 <v:imagedata src="Forms_files/image388.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=21
src="Forms_files/image385.png" v:shapes="_x0000_i1266"><![endif]></span> <i>with a
distinguished element f </i>of the node <span style='position:relative;
top:2.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1267"
 type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image389.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image344.png" v:shapes="_x0000_i1267"><![endif]></span>.&nbsp; That distinguished element is a particular diagram
and cone like the ones shown above for a particular object <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1268" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image390.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1268"><![endif]></span> (because the projections onto <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1269" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image391.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image344.png" v:shapes="_x0000_i1269"><![endif]></span> include a particular projection to <span
style='position:relative;top:5.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1270" type="#_x0000_t75" style='width:24.2pt;height:15.7pt' o:ole="">
 <v:imagedata src="Forms_files/image392.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=37 height=24
src="Forms_files/image393.png" v:shapes="_x0000_i1270"><![endif]></span>  That object <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1271" type="#_x0000_t75" style='width:11.8pt;height:13.1pt' o:ole="">
 <v:imagedata src="Forms_files/image394.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=18 height=20
src="Forms_files/image281.png" v:shapes="_x0000_i1271"><![endif]></span> with the arrows corresponding to <span
style='position:relative;top:2.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1272" type="#_x0000_t75" style='width:13.75pt;height:11.15pt'
 o:ole="">
 <v:imagedata src="Forms_files/image395.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=21 height=17
src="Forms_files/image396.png" v:shapes="_x0000_i1272"><![endif]></span>, <span style='position:relative;
top:6.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1273"
 type="#_x0000_t75" style='width:13.75pt;height:18.35pt' o:ole="">
 <v:imagedata src="Forms_files/image397.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=21 height=28
src="Forms_files/image398.png" v:shapes="_x0000_i1273"><![endif]></span> and <span
style='position:relative;top:6.0pt'><!--[if gte vml 1]><v:shape
 id="_x0000_i1274" type="#_x0000_t75" style='width:15.05pt;height:18.35pt'
 o:ole="">
 <v:imagedata src="Forms_files/image399.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img border=0 width=23 height=28
src="Forms_files/image400.png" v:shapes="_x0000_i1274"><![endif]></span> is a particular
magma, a model of the sketch for magmas given above.</p>

<p class=MsoNormal>The paper [LimSk] contains two other examples of forms, the
form whose models are categories with subterminal objects, and the category of
groups with morphisms restricted to those that preserve centers.  Neither of these categories can be
sketched.  They both use a
&quot;Universal Quantifier Constructor&quot;, and so have models in toposes.</p>

<h1>Acknowledgments</h1>

<p class=MsoNormal>Thanks to Toby Bartels for corrections and suggestions.</p>

<h1>References</h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a name=GBLS>[GBLS]</a> Atish Bagchi and Charles Wells, <i>Graph-Based
Logic and Sketches</i>, draft, September 2008, on <a
href="http://arxiv.org/PS_cache/arxiv/pdf/0809/0809.3023v1.pdf">ArXiv.</a></p>

<p class=MsoNormal><a name=MSk>[MSk] </a>Michael Barr, <i><a
href="http://www.numdam.org/item?id=CTGDC_1986__27_2_93_0">Models of sketches</a>
</i>(1986). Cahiers de Topologie et Géométrie Différentielle Catégorique,
27:93-107.</p>

<p class=MsoNormal><a name=LimSk>[LimSk]</a> Michael Barr and Charles Wells. <i>On
the limitations of sketches</i> (1992). Canadian Mathematical Bulletin,
35:287-294.</p>

<p class=MsoNormal>[<a name=CTCS>CTCS</a>] Michael Barr and Charles Wells, <i>Category
Theory for Computing Science</i> (1999). <a
href="http://www.crm.umontreal.ca/pub/Ventes/CatalogueEng.html">Les
Publications CRM</a>, Montreal (publication PM023).</p>

<p class=MsoNormal>[<a name=TTT>TTT</a>] Michael Barr and Charles Wells, <i>Toposes,
Triples and Theories</i> (2005). <a
href="http://www.tac.mta.ca/tac/reprints/articles/12/tr12.pdf">Reprints in
Theory and Applications of Categories 1</a>.</p>

<p class=MsoNormal>[<a name=GMG>GMG</a>] R. Brown, I. Morris,&nbsp;J. Shrimpton
and C. D. Wensley.  <a
href="http://www.emis.de/journals/EJC/Volume_15/PDF/v15i1a1.pdf">Graphs of
morphisms of graphs</a>, 2008.</p>

<p class=MsoNormal>[<a name=Mgm>Mgm</a>] M. Hazewinkel (2001), “<a
href="http://eom.springer.de/m/m110040.htm" target="_blank">Magma</a>“, in
Hazewinkel, Michiel, <a
href="http://en.wikipedia.org/wiki/Encyclopaedia_of_Mathematics"
title="Encyclopaedia of Mathematics">Encyclopaedia of Mathematics</a>, Kluwer
Academic Publishers, <a
href="http://en.wikipedia.org/wiki/International_Standard_Book_Number"
title="International Standard Book Number">ISBN</a> <a
href="http://en.wikipedia.org/wiki/Special:BookSources/978-1556080104"
title="Special:BookSources/978-1556080104">978-1556080104</a></p>

<p class=MsoNormal>[<a name=SkEl>SkEl]</a> <a
href="http://www.amazon.com/exec/obidos/search-handle-url/ref=ntt_athr_dp_sr_1?%5Fencoding=UTF8&amp;search-type=ss&amp;index=books&amp;field-author=Peter%20T.%20Johnstone">Peter
T. Johnstone</a>, <i>Sketches of an Elephant: A Topos Theory Compendium,</i> <i>Volume
2 </i>(2002)<i>. </i>Oxford Logic Guides 44, Oxford University Press, ISBN
978-0198524960.</p>

<p class=MsoNormal>[<a name=KPT>KPT</a>] Yoshiki Kinoshita, John Power, and
Makoto Takeyama. <i>Sketches </i>(1997)<i>.</i> In Mathematical Foundations of
Programming Semantics, Thirteenth Annual Conference, Stephen Brookes and
Michael W. Mislove, editors. Elsevier.</p>

<p class=MsoNormal>[<a name=nLEquiv>nLEquiv</a>]<i>
n-</i>Labs, <a
href="http://ncatlab.org/nlab/show/equivalence+of+categories">Equivalence of
categories.</a></p>

<p class=MsoNormal>[<a name=PHLCC>PHLCC</a>] Palmgren, E and Vickers, Steven
(2006) <i>Partial Horn logic and cartesian categories.</i> Annals of Pure and
Applied Logic, 143 (3). pp. 314-353. ISSN 0168-0072</p>

<p class=MsoNormal>[<a name=FEAS>FEAS</a>] A.J. Power and Charles Wells. <i>A
formalism for the specfication of essentially algebraic structures in
2-categories </i>(1992) Mathematical Structures in Computer Science, 2:1-28.</p>

<p class=MsoNormal>[<a name=FDDT>FDDT</a>] Charles Wells and Michael Barr, <span
style='font-family:"T1","sans-serif"'>T<i
>he formal description of data types using
sketches,</i> in </span><i ><span
style='font-family:"T15","sans-serif"'>Mathematical
Foundations of Programming Language Semantics</span></i><span style='font-family:
"T1","sans-serif"'>, M Main, A Melton, M Mislove, and D
Schmidt, editors. Lecture Notes in Computer Science </span><span
style='font-family:"T9","sans-serif"'>298 (1988). </span><span
style='font-family:"T1","sans-serif"'></span></p>

<p class=MsoNormal>[<a name=GenSk>GenSk</a>] Charles Wells. <a
href="http://www.cwru.edu/artsci/math/wells/pub/pdf/GCSketch.pdf"><i>A
generalization of the concept of sketch</i></a> (1990). Theoretical Computer
Science, 70:159-178.</p>

<p class=MsoNormal>[<a name=Hbk>Hbk</a>] Charles Wells, <i ><a href="http://www.cwru.edu/artsci/math/wells/pub/abouthbk.html">A
Handbook of Mathematical Discourse</a></i> (2003).</p>

<p class=MsoNormal>[<a name=SkOut>SkOut</a>]  Charles Wells, <a
href="http://www.cwru.edu/artsci/math/wells/pub/pdf/sketch.pdf">Sketches: Outline
with references</a>. (2009).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Charles (at) abstractmath.org</p>

</div>

</body>

</html>
